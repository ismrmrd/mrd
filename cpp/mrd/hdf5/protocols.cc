// This file was generated by the "yardl" tool. DO NOT EDIT.

#include "protocols.h"

#include "../yardl/detail/hdf5/io.h"
#include "../yardl/detail/hdf5/ddl.h"
#include "../yardl/detail/hdf5/inner_types.h"

namespace {
template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2>
class InnerUnion3 {
  public:
  InnerUnion3() : type_index_(-1) {} 
  InnerUnion3(std::variant<TOuter0, TOuter1, TOuter2> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion3(std::variant<std::monostate, TOuter0, TOuter1, TOuter2> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion3(InnerUnion3 const& v) = delete;

  InnerUnion3 operator=(InnerUnion3 const&) = delete;

  ~InnerUnion3() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    case 2:
      value2_.~TInner2();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1, TOuter2>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1, TOuter2>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };
  union {
    char empty2_[sizeof(TInner2)]{};
    TInner2 value2_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    case 2:
      new (&value2_) TInner2(std::get<2 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    case 2:
      o.template emplace<2 + offset>();
      yardl::hdf5::ToOuter(value2_, std::get<2 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2>
H5::CompType InnerUnion3Ddl(bool nullable, H5::DataType const& t0, std::string const& tag0, H5::DataType const& t1, std::string const& tag1, H5::DataType const& t2, std::string const& tag2) {
  using UnionType = ::InnerUnion3<TInner0, TOuter0, TInner1, TOuter1, TInner2, TOuter2>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, tag0, tag1, tag2));
  rtn.insertMember(tag0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(tag1, HOFFSET(UnionType, value1_), t1);
  rtn.insertMember(tag2, HOFFSET(UnionType, value2_), t2);
  return rtn;
}

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2, typename TInner3, typename TOuter3, typename TInner4, typename TOuter4, typename TInner5, typename TOuter5, typename TInner6, typename TOuter6, typename TInner7, typename TOuter7>
class InnerUnion8 {
  public:
  InnerUnion8() : type_index_(-1) {} 
  InnerUnion8(std::variant<TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion8(std::variant<std::monostate, TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion8(InnerUnion8 const& v) = delete;

  InnerUnion8 operator=(InnerUnion8 const&) = delete;

  ~InnerUnion8() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    case 2:
      value2_.~TInner2();
      break;
    case 3:
      value3_.~TInner3();
      break;
    case 4:
      value4_.~TInner4();
      break;
    case 5:
      value5_.~TInner5();
      break;
    case 6:
      value6_.~TInner6();
      break;
    case 7:
      value7_.~TInner7();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };
  union {
    char empty2_[sizeof(TInner2)]{};
    TInner2 value2_;
  };
  union {
    char empty3_[sizeof(TInner3)]{};
    TInner3 value3_;
  };
  union {
    char empty4_[sizeof(TInner4)]{};
    TInner4 value4_;
  };
  union {
    char empty5_[sizeof(TInner5)]{};
    TInner5 value5_;
  };
  union {
    char empty6_[sizeof(TInner6)]{};
    TInner6 value6_;
  };
  union {
    char empty7_[sizeof(TInner7)]{};
    TInner7 value7_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    case 2:
      new (&value2_) TInner2(std::get<2 + offset>(v));
      return;
    case 3:
      new (&value3_) TInner3(std::get<3 + offset>(v));
      return;
    case 4:
      new (&value4_) TInner4(std::get<4 + offset>(v));
      return;
    case 5:
      new (&value5_) TInner5(std::get<5 + offset>(v));
      return;
    case 6:
      new (&value6_) TInner6(std::get<6 + offset>(v));
      return;
    case 7:
      new (&value7_) TInner7(std::get<7 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    case 2:
      o.template emplace<2 + offset>();
      yardl::hdf5::ToOuter(value2_, std::get<2 + offset>(o));
      return;
    case 3:
      o.template emplace<3 + offset>();
      yardl::hdf5::ToOuter(value3_, std::get<3 + offset>(o));
      return;
    case 4:
      o.template emplace<4 + offset>();
      yardl::hdf5::ToOuter(value4_, std::get<4 + offset>(o));
      return;
    case 5:
      o.template emplace<5 + offset>();
      yardl::hdf5::ToOuter(value5_, std::get<5 + offset>(o));
      return;
    case 6:
      o.template emplace<6 + offset>();
      yardl::hdf5::ToOuter(value6_, std::get<6 + offset>(o));
      return;
    case 7:
      o.template emplace<7 + offset>();
      yardl::hdf5::ToOuter(value7_, std::get<7 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2, typename TInner3, typename TOuter3, typename TInner4, typename TOuter4, typename TInner5, typename TOuter5, typename TInner6, typename TOuter6, typename TInner7, typename TOuter7>
H5::CompType InnerUnion8Ddl(bool nullable, H5::DataType const& t0, std::string const& tag0, H5::DataType const& t1, std::string const& tag1, H5::DataType const& t2, std::string const& tag2, H5::DataType const& t3, std::string const& tag3, H5::DataType const& t4, std::string const& tag4, H5::DataType const& t5, std::string const& tag5, H5::DataType const& t6, std::string const& tag6, H5::DataType const& t7, std::string const& tag7) {
  using UnionType = ::InnerUnion8<TInner0, TOuter0, TInner1, TOuter1, TInner2, TOuter2, TInner3, TOuter3, TInner4, TOuter4, TInner5, TOuter5, TInner6, TOuter6, TInner7, TOuter7>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, tag0, tag1, tag2, tag3, tag4, tag5, tag6, tag7));
  rtn.insertMember(tag0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(tag1, HOFFSET(UnionType, value1_), t1);
  rtn.insertMember(tag2, HOFFSET(UnionType, value2_), t2);
  rtn.insertMember(tag3, HOFFSET(UnionType, value3_), t3);
  rtn.insertMember(tag4, HOFFSET(UnionType, value4_), t4);
  rtn.insertMember(tag5, HOFFSET(UnionType, value5_), t5);
  rtn.insertMember(tag6, HOFFSET(UnionType, value6_), t6);
  rtn.insertMember(tag7, HOFFSET(UnionType, value7_), t7);
  return rtn;
}

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2, typename TInner3, typename TOuter3, typename TInner4, typename TOuter4, typename TInner5, typename TOuter5, typename TInner6, typename TOuter6, typename TInner7, typename TOuter7, typename TInner8, typename TOuter8, typename TInner9, typename TOuter9, typename TInner10, typename TOuter10, typename TInner11, typename TOuter11, typename TInner12, typename TOuter12, typename TInner13, typename TOuter13>
class InnerUnion14 {
  public:
  InnerUnion14() : type_index_(-1) {} 
  InnerUnion14(std::variant<TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7, TOuter8, TOuter9, TOuter10, TOuter11, TOuter12, TOuter13> const& v) : type_index_(static_cast<int8_t>(v.index())) {
    Init(v);
  }

  InnerUnion14(std::variant<std::monostate, TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7, TOuter8, TOuter9, TOuter10, TOuter11, TOuter12, TOuter13> const& v) : type_index_(static_cast<int8_t>(v.index()) - 1) {
    Init(v);
  }

  InnerUnion14(InnerUnion14 const& v) = delete;

  InnerUnion14 operator=(InnerUnion14 const&) = delete;

  ~InnerUnion14() {
    switch (type_index_) {
    case 0:
      value0_.~TInner0();
      break;
    case 1:
      value1_.~TInner1();
      break;
    case 2:
      value2_.~TInner2();
      break;
    case 3:
      value3_.~TInner3();
      break;
    case 4:
      value4_.~TInner4();
      break;
    case 5:
      value5_.~TInner5();
      break;
    case 6:
      value6_.~TInner6();
      break;
    case 7:
      value7_.~TInner7();
      break;
    case 8:
      value8_.~TInner8();
      break;
    case 9:
      value9_.~TInner9();
      break;
    case 10:
      value10_.~TInner10();
      break;
    case 11:
      value11_.~TInner11();
      break;
    case 12:
      value12_.~TInner12();
      break;
    case 13:
      value13_.~TInner13();
      break;
    }
  }

  void ToOuter(std::variant<TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7, TOuter8, TOuter9, TOuter10, TOuter11, TOuter12, TOuter13>& o) const {
    ToOuterImpl(o);
  }

  void ToOuter(std::variant<std::monostate, TOuter0, TOuter1, TOuter2, TOuter3, TOuter4, TOuter5, TOuter6, TOuter7, TOuter8, TOuter9, TOuter10, TOuter11, TOuter12, TOuter13>& o) const {
    ToOuterImpl(o);
  }

  int8_t type_index_;
  union {
    char empty0_[sizeof(TInner0)]{};
    TInner0 value0_;
  };
  union {
    char empty1_[sizeof(TInner1)]{};
    TInner1 value1_;
  };
  union {
    char empty2_[sizeof(TInner2)]{};
    TInner2 value2_;
  };
  union {
    char empty3_[sizeof(TInner3)]{};
    TInner3 value3_;
  };
  union {
    char empty4_[sizeof(TInner4)]{};
    TInner4 value4_;
  };
  union {
    char empty5_[sizeof(TInner5)]{};
    TInner5 value5_;
  };
  union {
    char empty6_[sizeof(TInner6)]{};
    TInner6 value6_;
  };
  union {
    char empty7_[sizeof(TInner7)]{};
    TInner7 value7_;
  };
  union {
    char empty8_[sizeof(TInner8)]{};
    TInner8 value8_;
  };
  union {
    char empty9_[sizeof(TInner9)]{};
    TInner9 value9_;
  };
  union {
    char empty10_[sizeof(TInner10)]{};
    TInner10 value10_;
  };
  union {
    char empty11_[sizeof(TInner11)]{};
    TInner11 value11_;
  };
  union {
    char empty12_[sizeof(TInner12)]{};
    TInner12 value12_;
  };
  union {
    char empty13_[sizeof(TInner13)]{};
    TInner13 value13_;
  };

  private:
  template <typename T>
  void Init(T const& v) {
    constexpr size_t offset = GetOuterVariantOffset<std::remove_const_t<std::remove_reference_t<decltype(v)>>>();
    switch (type_index_) {
    case 0:
      new (&value0_) TInner0(std::get<0 + offset>(v));
      return;
    case 1:
      new (&value1_) TInner1(std::get<1 + offset>(v));
      return;
    case 2:
      new (&value2_) TInner2(std::get<2 + offset>(v));
      return;
    case 3:
      new (&value3_) TInner3(std::get<3 + offset>(v));
      return;
    case 4:
      new (&value4_) TInner4(std::get<4 + offset>(v));
      return;
    case 5:
      new (&value5_) TInner5(std::get<5 + offset>(v));
      return;
    case 6:
      new (&value6_) TInner6(std::get<6 + offset>(v));
      return;
    case 7:
      new (&value7_) TInner7(std::get<7 + offset>(v));
      return;
    case 8:
      new (&value8_) TInner8(std::get<8 + offset>(v));
      return;
    case 9:
      new (&value9_) TInner9(std::get<9 + offset>(v));
      return;
    case 10:
      new (&value10_) TInner10(std::get<10 + offset>(v));
      return;
    case 11:
      new (&value11_) TInner11(std::get<11 + offset>(v));
      return;
    case 12:
      new (&value12_) TInner12(std::get<12 + offset>(v));
      return;
    case 13:
      new (&value13_) TInner13(std::get<13 + offset>(v));
      return;
    }
  }

  template <typename TVariant>
  void ToOuterImpl(TVariant& o) const {
    constexpr size_t offset = GetOuterVariantOffset<TVariant>();
    switch (type_index_) {
    case -1:
      if constexpr (offset == 1) {
        o.template emplace<0>(std::monostate{});
        return;
      }
    case 0:
      o.template emplace<0 + offset>();
      yardl::hdf5::ToOuter(value0_, std::get<0 + offset>(o));
      return;
    case 1:
      o.template emplace<1 + offset>();
      yardl::hdf5::ToOuter(value1_, std::get<1 + offset>(o));
      return;
    case 2:
      o.template emplace<2 + offset>();
      yardl::hdf5::ToOuter(value2_, std::get<2 + offset>(o));
      return;
    case 3:
      o.template emplace<3 + offset>();
      yardl::hdf5::ToOuter(value3_, std::get<3 + offset>(o));
      return;
    case 4:
      o.template emplace<4 + offset>();
      yardl::hdf5::ToOuter(value4_, std::get<4 + offset>(o));
      return;
    case 5:
      o.template emplace<5 + offset>();
      yardl::hdf5::ToOuter(value5_, std::get<5 + offset>(o));
      return;
    case 6:
      o.template emplace<6 + offset>();
      yardl::hdf5::ToOuter(value6_, std::get<6 + offset>(o));
      return;
    case 7:
      o.template emplace<7 + offset>();
      yardl::hdf5::ToOuter(value7_, std::get<7 + offset>(o));
      return;
    case 8:
      o.template emplace<8 + offset>();
      yardl::hdf5::ToOuter(value8_, std::get<8 + offset>(o));
      return;
    case 9:
      o.template emplace<9 + offset>();
      yardl::hdf5::ToOuter(value9_, std::get<9 + offset>(o));
      return;
    case 10:
      o.template emplace<10 + offset>();
      yardl::hdf5::ToOuter(value10_, std::get<10 + offset>(o));
      return;
    case 11:
      o.template emplace<11 + offset>();
      yardl::hdf5::ToOuter(value11_, std::get<11 + offset>(o));
      return;
    case 12:
      o.template emplace<12 + offset>();
      yardl::hdf5::ToOuter(value12_, std::get<12 + offset>(o));
      return;
    case 13:
      o.template emplace<13 + offset>();
      yardl::hdf5::ToOuter(value13_, std::get<13 + offset>(o));
      return;
    }
    throw std::runtime_error("unrecognized type variant type index " + std::to_string(type_index_));
  }

  template <typename TVariant>
  static constexpr size_t GetOuterVariantOffset() {
    constexpr bool has_monostate = std::is_same_v<std::monostate, std::variant_alternative_t<0, TVariant>>;
    if constexpr (has_monostate) {
      return 1;
    }
      return 0;
  }
};

template <typename TInner0, typename TOuter0, typename TInner1, typename TOuter1, typename TInner2, typename TOuter2, typename TInner3, typename TOuter3, typename TInner4, typename TOuter4, typename TInner5, typename TOuter5, typename TInner6, typename TOuter6, typename TInner7, typename TOuter7, typename TInner8, typename TOuter8, typename TInner9, typename TOuter9, typename TInner10, typename TOuter10, typename TInner11, typename TOuter11, typename TInner12, typename TOuter12, typename TInner13, typename TOuter13>
H5::CompType InnerUnion14Ddl(bool nullable, H5::DataType const& t0, std::string const& tag0, H5::DataType const& t1, std::string const& tag1, H5::DataType const& t2, std::string const& tag2, H5::DataType const& t3, std::string const& tag3, H5::DataType const& t4, std::string const& tag4, H5::DataType const& t5, std::string const& tag5, H5::DataType const& t6, std::string const& tag6, H5::DataType const& t7, std::string const& tag7, H5::DataType const& t8, std::string const& tag8, H5::DataType const& t9, std::string const& tag9, H5::DataType const& t10, std::string const& tag10, H5::DataType const& t11, std::string const& tag11, H5::DataType const& t12, std::string const& tag12, H5::DataType const& t13, std::string const& tag13) {
  using UnionType = ::InnerUnion14<TInner0, TOuter0, TInner1, TOuter1, TInner2, TOuter2, TInner3, TOuter3, TInner4, TOuter4, TInner5, TOuter5, TInner6, TOuter6, TInner7, TOuter7, TInner8, TOuter8, TInner9, TOuter9, TInner10, TOuter10, TInner11, TOuter11, TInner12, TOuter12, TInner13, TOuter13>;
  H5::CompType rtn(sizeof(UnionType));
  rtn.insertMember("$type", HOFFSET(UnionType, type_index_), yardl::hdf5::UnionTypeEnumDdl(nullable, tag0, tag1, tag2, tag3, tag4, tag5, tag6, tag7, tag8, tag9, tag10, tag11, tag12, tag13));
  rtn.insertMember(tag0, HOFFSET(UnionType, value0_), t0);
  rtn.insertMember(tag1, HOFFSET(UnionType, value1_), t1);
  rtn.insertMember(tag2, HOFFSET(UnionType, value2_), t2);
  rtn.insertMember(tag3, HOFFSET(UnionType, value3_), t3);
  rtn.insertMember(tag4, HOFFSET(UnionType, value4_), t4);
  rtn.insertMember(tag5, HOFFSET(UnionType, value5_), t5);
  rtn.insertMember(tag6, HOFFSET(UnionType, value6_), t6);
  rtn.insertMember(tag7, HOFFSET(UnionType, value7_), t7);
  rtn.insertMember(tag8, HOFFSET(UnionType, value8_), t8);
  rtn.insertMember(tag9, HOFFSET(UnionType, value9_), t9);
  rtn.insertMember(tag10, HOFFSET(UnionType, value10_), t10);
  rtn.insertMember(tag11, HOFFSET(UnionType, value11_), t11);
  rtn.insertMember(tag12, HOFFSET(UnionType, value12_), t12);
  rtn.insertMember(tag13, HOFFSET(UnionType, value13_), t13);
  return rtn;
}
}

namespace mrd::hdf5 {
namespace {
[[maybe_unused]] H5::EnumType GetPatientGenderHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("m", &i);
  i = 1;
  t.insert("f", &i);
  i = 2;
  t.insert("o", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetPatientPositionHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("hFP", &i);
  i = 1;
  t.insert("hFS", &i);
  i = 2;
  t.insert("hFDR", &i);
  i = 3;
  t.insert("hFDL", &i);
  i = 4;
  t.insert("fFP", &i);
  i = 5;
  t.insert("fFS", &i);
  i = 6;
  t.insert("fFDR", &i);
  i = 7;
  t.insert("fFDL", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetTrajectoryHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("cartesian", &i);
  i = 1;
  t.insert("epi", &i);
  i = 2;
  t.insert("radial", &i);
  i = 3;
  t.insert("goldenangle", &i);
  i = 4;
  t.insert("spiral", &i);
  i = 5;
  t.insert("other", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetCalibrationModeHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("noacceleration", &i);
  i = 1;
  t.insert("embedded", &i);
  i = 2;
  t.insert("interleaved", &i);
  i = 3;
  t.insert("separate", &i);
  i = 4;
  t.insert("external", &i);
  i = 5;
  t.insert("other", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetInterleavingDimensionHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("phase", &i);
  i = 1;
  t.insert("repetition", &i);
  i = 2;
  t.insert("contrast", &i);
  i = 3;
  t.insert("average", &i);
  i = 4;
  t.insert("other", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetCalibrationHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("separable2D", &i);
  i = 1;
  t.insert("full3D", &i);
  i = 2;
  t.insert("other", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetDiffusionDimensionHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("average", &i);
  i = 1;
  t.insert("contrast", &i);
  i = 2;
  t.insert("phase", &i);
  i = 3;
  t.insert("repetition", &i);
  i = 4;
  t.insert("set", &i);
  i = 5;
  t.insert("segment", &i);
  i = 6;
  t.insert("user0", &i);
  i = 7;
  t.insert("user1", &i);
  i = 8;
  t.insert("user2", &i);
  i = 9;
  t.insert("user3", &i);
  i = 10;
  t.insert("user4", &i);
  i = 11;
  t.insert("user5", &i);
  i = 12;
  t.insert("user6", &i);
  i = 13;
  t.insert("user7", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetWaveformTypeHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 0;
  t.insert("ecg", &i);
  i = 1;
  t.insert("pulse", &i);
  i = 2;
  t.insert("respiratory", &i);
  i = 3;
  t.insert("trigger", &i);
  i = 4;
  t.insert("gradientwaveform", &i);
  i = 5;
  t.insert("other", &i);
  return t;
}

[[maybe_unused]] H5::EnumType GetImageTypeHdf5Ddl() {
  H5::EnumType t(H5::PredType::NATIVE_INT32);
  int32_t i = 1;
  t.insert("magnitude", &i);
  i = 2;
  t.insert("phase", &i);
  i = 3;
  t.insert("real", &i);
  i = 4;
  t.insert("imag", &i);
  i = 5;
  t.insert("complex", &i);
  return t;
}

struct _Inner_EncodingCounters {
  _Inner_EncodingCounters() {} 
  _Inner_EncodingCounters(mrd::EncodingCounters const& o) 
      : kspace_encode_step_1(o.kspace_encode_step_1),
      kspace_encode_step_2(o.kspace_encode_step_2),
      average(o.average),
      slice(o.slice),
      contrast(o.contrast),
      phase(o.phase),
      repetition(o.repetition),
      set(o.set),
      segment(o.segment),
      user(o.user) {
  }

  void ToOuter (mrd::EncodingCounters& o) const {
    yardl::hdf5::ToOuter(kspace_encode_step_1, o.kspace_encode_step_1);
    yardl::hdf5::ToOuter(kspace_encode_step_2, o.kspace_encode_step_2);
    yardl::hdf5::ToOuter(average, o.average);
    yardl::hdf5::ToOuter(slice, o.slice);
    yardl::hdf5::ToOuter(contrast, o.contrast);
    yardl::hdf5::ToOuter(phase, o.phase);
    yardl::hdf5::ToOuter(repetition, o.repetition);
    yardl::hdf5::ToOuter(set, o.set);
    yardl::hdf5::ToOuter(segment, o.segment);
    yardl::hdf5::ToOuter(user, o.user);
  }

  yardl::hdf5::InnerOptional<uint32_t, uint32_t> kspace_encode_step_1;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> kspace_encode_step_2;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> average;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> slice;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> contrast;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> phase;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> repetition;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> set;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> segment;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> user;
};

struct _Inner_AcquisitionHeader {
  _Inner_AcquisitionHeader() {} 
  _Inner_AcquisitionHeader(mrd::AcquisitionHeader const& o) 
      : flags(o.flags),
      idx(o.idx),
      measurement_uid(o.measurement_uid),
      scan_counter(o.scan_counter),
      acquisition_time_stamp(o.acquisition_time_stamp),
      physiology_time_stamp(o.physiology_time_stamp),
      channel_order(o.channel_order),
      discard_pre(o.discard_pre),
      discard_post(o.discard_post),
      center_sample(o.center_sample),
      encoding_space_ref(o.encoding_space_ref),
      sample_time_us(o.sample_time_us),
      position(o.position),
      read_dir(o.read_dir),
      phase_dir(o.phase_dir),
      slice_dir(o.slice_dir),
      patient_table_position(o.patient_table_position),
      user_int(o.user_int),
      user_float(o.user_float) {
  }

  void ToOuter (mrd::AcquisitionHeader& o) const {
    yardl::hdf5::ToOuter(flags, o.flags);
    yardl::hdf5::ToOuter(idx, o.idx);
    yardl::hdf5::ToOuter(measurement_uid, o.measurement_uid);
    yardl::hdf5::ToOuter(scan_counter, o.scan_counter);
    yardl::hdf5::ToOuter(acquisition_time_stamp, o.acquisition_time_stamp);
    yardl::hdf5::ToOuter(physiology_time_stamp, o.physiology_time_stamp);
    yardl::hdf5::ToOuter(channel_order, o.channel_order);
    yardl::hdf5::ToOuter(discard_pre, o.discard_pre);
    yardl::hdf5::ToOuter(discard_post, o.discard_post);
    yardl::hdf5::ToOuter(center_sample, o.center_sample);
    yardl::hdf5::ToOuter(encoding_space_ref, o.encoding_space_ref);
    yardl::hdf5::ToOuter(sample_time_us, o.sample_time_us);
    yardl::hdf5::ToOuter(position, o.position);
    yardl::hdf5::ToOuter(read_dir, o.read_dir);
    yardl::hdf5::ToOuter(phase_dir, o.phase_dir);
    yardl::hdf5::ToOuter(slice_dir, o.slice_dir);
    yardl::hdf5::ToOuter(patient_table_position, o.patient_table_position);
    yardl::hdf5::ToOuter(user_int, o.user_int);
    yardl::hdf5::ToOuter(user_float, o.user_float);
  }

  mrd::AcquisitionFlags flags;
  mrd::hdf5::_Inner_EncodingCounters idx;
  uint32_t measurement_uid;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> scan_counter;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> acquisition_time_stamp;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> physiology_time_stamp;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> channel_order;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> discard_pre;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> discard_post;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> center_sample;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> encoding_space_ref;
  yardl::hdf5::InnerOptional<float, float> sample_time_us;
  yardl::FixedNDArray<float, 3> position;
  yardl::FixedNDArray<float, 3> read_dir;
  yardl::FixedNDArray<float, 3> phase_dir;
  yardl::FixedNDArray<float, 3> slice_dir;
  yardl::FixedNDArray<float, 3> patient_table_position;
  yardl::hdf5::InnerVlen<int32_t, int32_t> user_int;
  yardl::hdf5::InnerVlen<float, float> user_float;
};

struct _Inner_Acquisition {
  _Inner_Acquisition() {} 
  _Inner_Acquisition(mrd::Acquisition const& o) 
      : head(o.head),
      data(o.data),
      trajectory(o.trajectory) {
  }

  void ToOuter (mrd::Acquisition& o) const {
    yardl::hdf5::ToOuter(head, o.head);
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(trajectory, o.trajectory);
  }

  mrd::hdf5::_Inner_AcquisitionHeader head;
  yardl::hdf5::InnerNdArray<std::complex<float>, std::complex<float>, 2> data;
  yardl::hdf5::InnerNdArray<float, float, 2> trajectory;
};

struct _Inner_SubjectInformationType {
  _Inner_SubjectInformationType() {} 
  _Inner_SubjectInformationType(mrd::SubjectInformationType const& o) 
      : patient_name(o.patient_name),
      patient_weight_kg(o.patient_weight_kg),
      patient_height_m(o.patient_height_m),
      patient_id(o.patient_id),
      patient_birthdate(o.patient_birthdate),
      patient_gender(o.patient_gender) {
  }

  void ToOuter (mrd::SubjectInformationType& o) const {
    yardl::hdf5::ToOuter(patient_name, o.patient_name);
    yardl::hdf5::ToOuter(patient_weight_kg, o.patient_weight_kg);
    yardl::hdf5::ToOuter(patient_height_m, o.patient_height_m);
    yardl::hdf5::ToOuter(patient_id, o.patient_id);
    yardl::hdf5::ToOuter(patient_birthdate, o.patient_birthdate);
    yardl::hdf5::ToOuter(patient_gender, o.patient_gender);
  }

  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> patient_name;
  yardl::hdf5::InnerOptional<float, float> patient_weight_kg;
  yardl::hdf5::InnerOptional<float, float> patient_height_m;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> patient_id;
  yardl::hdf5::InnerOptional<yardl::Date, yardl::Date> patient_birthdate;
  yardl::hdf5::InnerOptional<mrd::PatientGender, mrd::PatientGender> patient_gender;
};

struct _Inner_StudyInformationType {
  _Inner_StudyInformationType() {} 
  _Inner_StudyInformationType(mrd::StudyInformationType const& o) 
      : study_date(o.study_date),
      study_time(o.study_time),
      study_id(o.study_id),
      accession_number(o.accession_number),
      referring_physician_name(o.referring_physician_name),
      study_description(o.study_description),
      study_instance_uid(o.study_instance_uid),
      body_part_examined(o.body_part_examined) {
  }

  void ToOuter (mrd::StudyInformationType& o) const {
    yardl::hdf5::ToOuter(study_date, o.study_date);
    yardl::hdf5::ToOuter(study_time, o.study_time);
    yardl::hdf5::ToOuter(study_id, o.study_id);
    yardl::hdf5::ToOuter(accession_number, o.accession_number);
    yardl::hdf5::ToOuter(referring_physician_name, o.referring_physician_name);
    yardl::hdf5::ToOuter(study_description, o.study_description);
    yardl::hdf5::ToOuter(study_instance_uid, o.study_instance_uid);
    yardl::hdf5::ToOuter(body_part_examined, o.body_part_examined);
  }

  yardl::hdf5::InnerOptional<yardl::Date, yardl::Date> study_date;
  yardl::hdf5::InnerOptional<yardl::Time, yardl::Time> study_time;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> study_id;
  yardl::hdf5::InnerOptional<int64_t, int64_t> accession_number;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> referring_physician_name;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> study_description;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> study_instance_uid;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> body_part_examined;
};

struct _Inner_MeasurementDependencyType {
  _Inner_MeasurementDependencyType() {} 
  _Inner_MeasurementDependencyType(mrd::MeasurementDependencyType const& o) 
      : dependency_type(o.dependency_type),
      measurement_id(o.measurement_id) {
  }

  void ToOuter (mrd::MeasurementDependencyType& o) const {
    yardl::hdf5::ToOuter(dependency_type, o.dependency_type);
    yardl::hdf5::ToOuter(measurement_id, o.measurement_id);
  }

  yardl::hdf5::InnerVlenString dependency_type;
  yardl::hdf5::InnerVlenString measurement_id;
};

struct _Inner_ReferencedImageSequenceType {
  _Inner_ReferencedImageSequenceType() {} 
  _Inner_ReferencedImageSequenceType(mrd::ReferencedImageSequenceType const& o) 
      : referenced_sop_instance_uid(o.referenced_sop_instance_uid) {
  }

  void ToOuter (mrd::ReferencedImageSequenceType& o) const {
    yardl::hdf5::ToOuter(referenced_sop_instance_uid, o.referenced_sop_instance_uid);
  }

  yardl::hdf5::InnerVlen<yardl::hdf5::InnerVlenString, std::string> referenced_sop_instance_uid;
};

struct _Inner_MeasurementInformationType {
  _Inner_MeasurementInformationType() {} 
  _Inner_MeasurementInformationType(mrd::MeasurementInformationType const& o) 
      : measurement_id(o.measurement_id),
      series_date(o.series_date),
      series_time(o.series_time),
      patient_position(o.patient_position),
      relative_table_position(o.relative_table_position),
      initial_series_number(o.initial_series_number),
      protocol_name(o.protocol_name),
      sequence_name(o.sequence_name),
      series_description(o.series_description),
      measurement_dependency(o.measurement_dependency),
      series_instance_uid_root(o.series_instance_uid_root),
      frame_of_reference_uid(o.frame_of_reference_uid),
      referenced_image_sequence(o.referenced_image_sequence) {
  }

  void ToOuter (mrd::MeasurementInformationType& o) const {
    yardl::hdf5::ToOuter(measurement_id, o.measurement_id);
    yardl::hdf5::ToOuter(series_date, o.series_date);
    yardl::hdf5::ToOuter(series_time, o.series_time);
    yardl::hdf5::ToOuter(patient_position, o.patient_position);
    yardl::hdf5::ToOuter(relative_table_position, o.relative_table_position);
    yardl::hdf5::ToOuter(initial_series_number, o.initial_series_number);
    yardl::hdf5::ToOuter(protocol_name, o.protocol_name);
    yardl::hdf5::ToOuter(sequence_name, o.sequence_name);
    yardl::hdf5::ToOuter(series_description, o.series_description);
    yardl::hdf5::ToOuter(measurement_dependency, o.measurement_dependency);
    yardl::hdf5::ToOuter(series_instance_uid_root, o.series_instance_uid_root);
    yardl::hdf5::ToOuter(frame_of_reference_uid, o.frame_of_reference_uid);
    yardl::hdf5::ToOuter(referenced_image_sequence, o.referenced_image_sequence);
  }

  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> measurement_id;
  yardl::hdf5::InnerOptional<yardl::Date, yardl::Date> series_date;
  yardl::hdf5::InnerOptional<yardl::Time, yardl::Time> series_time;
  mrd::PatientPosition patient_position;
  yardl::hdf5::InnerOptional<mrd::ThreeDimensionalFloat, mrd::ThreeDimensionalFloat> relative_table_position;
  yardl::hdf5::InnerOptional<int64_t, int64_t> initial_series_number;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> protocol_name;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> sequence_name;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> series_description;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_MeasurementDependencyType, mrd::MeasurementDependencyType> measurement_dependency;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> series_instance_uid_root;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> frame_of_reference_uid;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_ReferencedImageSequenceType, mrd::ReferencedImageSequenceType> referenced_image_sequence;
};

struct _Inner_CoilLabelType {
  _Inner_CoilLabelType() {} 
  _Inner_CoilLabelType(mrd::CoilLabelType const& o) 
      : coil_number(o.coil_number),
      coil_name(o.coil_name) {
  }

  void ToOuter (mrd::CoilLabelType& o) const {
    yardl::hdf5::ToOuter(coil_number, o.coil_number);
    yardl::hdf5::ToOuter(coil_name, o.coil_name);
  }

  uint32_t coil_number;
  yardl::hdf5::InnerVlenString coil_name;
};

struct _Inner_AcquisitionSystemInformationType {
  _Inner_AcquisitionSystemInformationType() {} 
  _Inner_AcquisitionSystemInformationType(mrd::AcquisitionSystemInformationType const& o) 
      : system_vendor(o.system_vendor),
      system_model(o.system_model),
      system_field_strength_t(o.system_field_strength_t),
      relative_receiver_noise_bandwidth(o.relative_receiver_noise_bandwidth),
      receiver_channels(o.receiver_channels),
      coil_label(o.coil_label),
      institution_name(o.institution_name),
      station_name(o.station_name),
      device_id(o.device_id),
      device_serial_number(o.device_serial_number) {
  }

  void ToOuter (mrd::AcquisitionSystemInformationType& o) const {
    yardl::hdf5::ToOuter(system_vendor, o.system_vendor);
    yardl::hdf5::ToOuter(system_model, o.system_model);
    yardl::hdf5::ToOuter(system_field_strength_t, o.system_field_strength_t);
    yardl::hdf5::ToOuter(relative_receiver_noise_bandwidth, o.relative_receiver_noise_bandwidth);
    yardl::hdf5::ToOuter(receiver_channels, o.receiver_channels);
    yardl::hdf5::ToOuter(coil_label, o.coil_label);
    yardl::hdf5::ToOuter(institution_name, o.institution_name);
    yardl::hdf5::ToOuter(station_name, o.station_name);
    yardl::hdf5::ToOuter(device_id, o.device_id);
    yardl::hdf5::ToOuter(device_serial_number, o.device_serial_number);
  }

  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> system_vendor;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> system_model;
  yardl::hdf5::InnerOptional<float, float> system_field_strength_t;
  yardl::hdf5::InnerOptional<float, float> relative_receiver_noise_bandwidth;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> receiver_channels;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_CoilLabelType, mrd::CoilLabelType> coil_label;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> institution_name;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> station_name;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> device_id;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> device_serial_number;
};

struct _Inner_EncodingLimitsType {
  _Inner_EncodingLimitsType() {} 
  _Inner_EncodingLimitsType(mrd::EncodingLimitsType const& o) 
      : kspace_encoding_step_0(o.kspace_encoding_step_0),
      kspace_encoding_step_1(o.kspace_encoding_step_1),
      kspace_encoding_step_2(o.kspace_encoding_step_2),
      average(o.average),
      slice(o.slice),
      contrast(o.contrast),
      phase(o.phase),
      repetition(o.repetition),
      set(o.set),
      segment(o.segment),
      user_0(o.user_0),
      user_1(o.user_1),
      user_2(o.user_2),
      user_3(o.user_3),
      user_4(o.user_4),
      user_5(o.user_5),
      user_6(o.user_6),
      user_7(o.user_7) {
  }

  void ToOuter (mrd::EncodingLimitsType& o) const {
    yardl::hdf5::ToOuter(kspace_encoding_step_0, o.kspace_encoding_step_0);
    yardl::hdf5::ToOuter(kspace_encoding_step_1, o.kspace_encoding_step_1);
    yardl::hdf5::ToOuter(kspace_encoding_step_2, o.kspace_encoding_step_2);
    yardl::hdf5::ToOuter(average, o.average);
    yardl::hdf5::ToOuter(slice, o.slice);
    yardl::hdf5::ToOuter(contrast, o.contrast);
    yardl::hdf5::ToOuter(phase, o.phase);
    yardl::hdf5::ToOuter(repetition, o.repetition);
    yardl::hdf5::ToOuter(set, o.set);
    yardl::hdf5::ToOuter(segment, o.segment);
    yardl::hdf5::ToOuter(user_0, o.user_0);
    yardl::hdf5::ToOuter(user_1, o.user_1);
    yardl::hdf5::ToOuter(user_2, o.user_2);
    yardl::hdf5::ToOuter(user_3, o.user_3);
    yardl::hdf5::ToOuter(user_4, o.user_4);
    yardl::hdf5::ToOuter(user_5, o.user_5);
    yardl::hdf5::ToOuter(user_6, o.user_6);
    yardl::hdf5::ToOuter(user_7, o.user_7);
  }

  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> kspace_encoding_step_0;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> kspace_encoding_step_1;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> kspace_encoding_step_2;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> average;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> slice;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> contrast;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> phase;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> repetition;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> set;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> segment;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_0;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_1;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_2;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_3;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_4;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_5;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_6;
  yardl::hdf5::InnerOptional<mrd::LimitType, mrd::LimitType> user_7;
};

struct _Inner_UserParameterLongType {
  _Inner_UserParameterLongType() {} 
  _Inner_UserParameterLongType(mrd::UserParameterLongType const& o) 
      : name(o.name),
      value(o.value) {
  }

  void ToOuter (mrd::UserParameterLongType& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(value, o.value);
  }

  yardl::hdf5::InnerVlenString name;
  int64_t value;
};

struct _Inner_UserParameterDoubleType {
  _Inner_UserParameterDoubleType() {} 
  _Inner_UserParameterDoubleType(mrd::UserParameterDoubleType const& o) 
      : name(o.name),
      value(o.value) {
  }

  void ToOuter (mrd::UserParameterDoubleType& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(value, o.value);
  }

  yardl::hdf5::InnerVlenString name;
  double value;
};

struct _Inner_UserParameterStringType {
  _Inner_UserParameterStringType() {} 
  _Inner_UserParameterStringType(mrd::UserParameterStringType const& o) 
      : name(o.name),
      value(o.value) {
  }

  void ToOuter (mrd::UserParameterStringType& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(value, o.value);
  }

  yardl::hdf5::InnerVlenString name;
  yardl::hdf5::InnerVlenString value;
};

struct _Inner_TrajectoryDescriptionType {
  _Inner_TrajectoryDescriptionType() {} 
  _Inner_TrajectoryDescriptionType(mrd::TrajectoryDescriptionType const& o) 
      : identifier(o.identifier),
      user_parameter_long(o.user_parameter_long),
      user_parameter_double(o.user_parameter_double),
      user_parameter_string(o.user_parameter_string),
      comment(o.comment) {
  }

  void ToOuter (mrd::TrajectoryDescriptionType& o) const {
    yardl::hdf5::ToOuter(identifier, o.identifier);
    yardl::hdf5::ToOuter(user_parameter_long, o.user_parameter_long);
    yardl::hdf5::ToOuter(user_parameter_double, o.user_parameter_double);
    yardl::hdf5::ToOuter(user_parameter_string, o.user_parameter_string);
    yardl::hdf5::ToOuter(comment, o.comment);
  }

  yardl::hdf5::InnerVlenString identifier;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterLongType, mrd::UserParameterLongType> user_parameter_long;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterDoubleType, mrd::UserParameterDoubleType> user_parameter_double;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterStringType, mrd::UserParameterStringType> user_parameter_string;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> comment;
};

struct _Inner_MultibandSpacingType {
  _Inner_MultibandSpacingType() {} 
  _Inner_MultibandSpacingType(mrd::MultibandSpacingType const& o) 
      : d_z(o.d_z) {
  }

  void ToOuter (mrd::MultibandSpacingType& o) const {
    yardl::hdf5::ToOuter(d_z, o.d_z);
  }

  yardl::hdf5::InnerVlen<float, float> d_z;
};

struct _Inner_MultibandType {
  _Inner_MultibandType() {} 
  _Inner_MultibandType(mrd::MultibandType const& o) 
      : spacing(o.spacing),
      delta_kz(o.delta_kz),
      multiband_factor(o.multiband_factor),
      calibration(o.calibration),
      calibration_encoding(o.calibration_encoding) {
  }

  void ToOuter (mrd::MultibandType& o) const {
    yardl::hdf5::ToOuter(spacing, o.spacing);
    yardl::hdf5::ToOuter(delta_kz, o.delta_kz);
    yardl::hdf5::ToOuter(multiband_factor, o.multiband_factor);
    yardl::hdf5::ToOuter(calibration, o.calibration);
    yardl::hdf5::ToOuter(calibration_encoding, o.calibration_encoding);
  }

  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_MultibandSpacingType, mrd::MultibandSpacingType> spacing;
  float delta_kz;
  uint32_t multiband_factor;
  mrd::Calibration calibration;
  uint64_t calibration_encoding;
};

struct _Inner_ParallelImagingType {
  _Inner_ParallelImagingType() {} 
  _Inner_ParallelImagingType(mrd::ParallelImagingType const& o) 
      : acceleration_factor(o.acceleration_factor),
      calibration_mode(o.calibration_mode),
      interleaving_dimension(o.interleaving_dimension),
      multiband(o.multiband) {
  }

  void ToOuter (mrd::ParallelImagingType& o) const {
    yardl::hdf5::ToOuter(acceleration_factor, o.acceleration_factor);
    yardl::hdf5::ToOuter(calibration_mode, o.calibration_mode);
    yardl::hdf5::ToOuter(interleaving_dimension, o.interleaving_dimension);
    yardl::hdf5::ToOuter(multiband, o.multiband);
  }

  mrd::AccelerationFactorType acceleration_factor;
  yardl::hdf5::InnerOptional<mrd::CalibrationMode, mrd::CalibrationMode> calibration_mode;
  yardl::hdf5::InnerOptional<mrd::InterleavingDimension, mrd::InterleavingDimension> interleaving_dimension;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_MultibandType, mrd::MultibandType> multiband;
};

struct _Inner_EncodingType {
  _Inner_EncodingType() {} 
  _Inner_EncodingType(mrd::EncodingType const& o) 
      : encoded_space(o.encoded_space),
      recon_space(o.recon_space),
      encoding_limits(o.encoding_limits),
      trajectory(o.trajectory),
      trajectory_description(o.trajectory_description),
      parallel_imaging(o.parallel_imaging),
      echo_train_length(o.echo_train_length) {
  }

  void ToOuter (mrd::EncodingType& o) const {
    yardl::hdf5::ToOuter(encoded_space, o.encoded_space);
    yardl::hdf5::ToOuter(recon_space, o.recon_space);
    yardl::hdf5::ToOuter(encoding_limits, o.encoding_limits);
    yardl::hdf5::ToOuter(trajectory, o.trajectory);
    yardl::hdf5::ToOuter(trajectory_description, o.trajectory_description);
    yardl::hdf5::ToOuter(parallel_imaging, o.parallel_imaging);
    yardl::hdf5::ToOuter(echo_train_length, o.echo_train_length);
  }

  mrd::EncodingSpaceType encoded_space;
  mrd::EncodingSpaceType recon_space;
  mrd::hdf5::_Inner_EncodingLimitsType encoding_limits;
  mrd::Trajectory trajectory;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_TrajectoryDescriptionType, mrd::TrajectoryDescriptionType> trajectory_description;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_ParallelImagingType, mrd::ParallelImagingType> parallel_imaging;
  yardl::hdf5::InnerOptional<int64_t, int64_t> echo_train_length;
};

struct _Inner_SequenceParametersType {
  _Inner_SequenceParametersType() {} 
  _Inner_SequenceParametersType(mrd::SequenceParametersType const& o) 
      : t_r(o.t_r),
      t_e(o.t_e),
      t_i(o.t_i),
      flip_angle_deg(o.flip_angle_deg),
      sequence_type(o.sequence_type),
      echo_spacing(o.echo_spacing),
      diffusion_dimension(o.diffusion_dimension),
      diffusion(o.diffusion),
      diffusion_scheme(o.diffusion_scheme) {
  }

  void ToOuter (mrd::SequenceParametersType& o) const {
    yardl::hdf5::ToOuter(t_r, o.t_r);
    yardl::hdf5::ToOuter(t_e, o.t_e);
    yardl::hdf5::ToOuter(t_i, o.t_i);
    yardl::hdf5::ToOuter(flip_angle_deg, o.flip_angle_deg);
    yardl::hdf5::ToOuter(sequence_type, o.sequence_type);
    yardl::hdf5::ToOuter(echo_spacing, o.echo_spacing);
    yardl::hdf5::ToOuter(diffusion_dimension, o.diffusion_dimension);
    yardl::hdf5::ToOuter(diffusion, o.diffusion);
    yardl::hdf5::ToOuter(diffusion_scheme, o.diffusion_scheme);
  }

  yardl::hdf5::InnerVlen<float, float> t_r;
  yardl::hdf5::InnerVlen<float, float> t_e;
  yardl::hdf5::InnerVlen<float, float> t_i;
  yardl::hdf5::InnerVlen<float, float> flip_angle_deg;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> sequence_type;
  yardl::hdf5::InnerVlen<float, float> echo_spacing;
  yardl::hdf5::InnerOptional<mrd::DiffusionDimension, mrd::DiffusionDimension> diffusion_dimension;
  yardl::hdf5::InnerVlen<mrd::DiffusionType, mrd::DiffusionType> diffusion;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerVlenString, std::string> diffusion_scheme;
};

struct _Inner_UserParameterBase64Type {
  _Inner_UserParameterBase64Type() {} 
  _Inner_UserParameterBase64Type(mrd::UserParameterBase64Type const& o) 
      : name(o.name),
      value(o.value) {
  }

  void ToOuter (mrd::UserParameterBase64Type& o) const {
    yardl::hdf5::ToOuter(name, o.name);
    yardl::hdf5::ToOuter(value, o.value);
  }

  yardl::hdf5::InnerVlenString name;
  yardl::hdf5::InnerVlenString value;
};

struct _Inner_UserParametersType {
  _Inner_UserParametersType() {} 
  _Inner_UserParametersType(mrd::UserParametersType const& o) 
      : user_parameter_long(o.user_parameter_long),
      user_parameter_double(o.user_parameter_double),
      user_parameter_string(o.user_parameter_string),
      user_parameter_base64(o.user_parameter_base64) {
  }

  void ToOuter (mrd::UserParametersType& o) const {
    yardl::hdf5::ToOuter(user_parameter_long, o.user_parameter_long);
    yardl::hdf5::ToOuter(user_parameter_double, o.user_parameter_double);
    yardl::hdf5::ToOuter(user_parameter_string, o.user_parameter_string);
    yardl::hdf5::ToOuter(user_parameter_base64, o.user_parameter_base64);
  }

  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterLongType, mrd::UserParameterLongType> user_parameter_long;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterDoubleType, mrd::UserParameterDoubleType> user_parameter_double;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterStringType, mrd::UserParameterStringType> user_parameter_string;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_UserParameterBase64Type, mrd::UserParameterBase64Type> user_parameter_base64;
};

struct _Inner_WaveformInformationType {
  _Inner_WaveformInformationType() {} 
  _Inner_WaveformInformationType(mrd::WaveformInformationType const& o) 
      : waveform_name(o.waveform_name),
      waveform_type(o.waveform_type),
      user_parameters(o.user_parameters) {
  }

  void ToOuter (mrd::WaveformInformationType& o) const {
    yardl::hdf5::ToOuter(waveform_name, o.waveform_name);
    yardl::hdf5::ToOuter(waveform_type, o.waveform_type);
    yardl::hdf5::ToOuter(user_parameters, o.user_parameters);
  }

  yardl::hdf5::InnerVlenString waveform_name;
  mrd::WaveformType waveform_type;
  mrd::hdf5::_Inner_UserParametersType user_parameters;
};

struct _Inner_Header {
  _Inner_Header() {} 
  _Inner_Header(mrd::Header const& o) 
      : version(o.version),
      subject_information(o.subject_information),
      study_information(o.study_information),
      measurement_information(o.measurement_information),
      acquisition_system_information(o.acquisition_system_information),
      experimental_conditions(o.experimental_conditions),
      encoding(o.encoding),
      sequence_parameters(o.sequence_parameters),
      user_parameters(o.user_parameters),
      waveform_information(o.waveform_information) {
  }

  void ToOuter (mrd::Header& o) const {
    yardl::hdf5::ToOuter(version, o.version);
    yardl::hdf5::ToOuter(subject_information, o.subject_information);
    yardl::hdf5::ToOuter(study_information, o.study_information);
    yardl::hdf5::ToOuter(measurement_information, o.measurement_information);
    yardl::hdf5::ToOuter(acquisition_system_information, o.acquisition_system_information);
    yardl::hdf5::ToOuter(experimental_conditions, o.experimental_conditions);
    yardl::hdf5::ToOuter(encoding, o.encoding);
    yardl::hdf5::ToOuter(sequence_parameters, o.sequence_parameters);
    yardl::hdf5::ToOuter(user_parameters, o.user_parameters);
    yardl::hdf5::ToOuter(waveform_information, o.waveform_information);
  }

  yardl::hdf5::InnerOptional<int64_t, int64_t> version;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_SubjectInformationType, mrd::SubjectInformationType> subject_information;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_StudyInformationType, mrd::StudyInformationType> study_information;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_MeasurementInformationType, mrd::MeasurementInformationType> measurement_information;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_AcquisitionSystemInformationType, mrd::AcquisitionSystemInformationType> acquisition_system_information;
  mrd::ExperimentalConditionsType experimental_conditions;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_EncodingType, mrd::EncodingType> encoding;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_SequenceParametersType, mrd::SequenceParametersType> sequence_parameters;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_UserParametersType, mrd::UserParametersType> user_parameters;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_WaveformInformationType, mrd::WaveformInformationType> waveform_information;
};

struct _Inner_ImageHeader {
  _Inner_ImageHeader() {} 
  _Inner_ImageHeader(mrd::ImageHeader const& o) 
      : flags(o.flags),
      measurement_uid(o.measurement_uid),
      field_of_view(o.field_of_view),
      position(o.position),
      col_dir(o.col_dir),
      line_dir(o.line_dir),
      slice_dir(o.slice_dir),
      patient_table_position(o.patient_table_position),
      average(o.average),
      slice(o.slice),
      contrast(o.contrast),
      phase(o.phase),
      repetition(o.repetition),
      set(o.set),
      acquisition_time_stamp(o.acquisition_time_stamp),
      physiology_time_stamp(o.physiology_time_stamp),
      image_type(o.image_type),
      image_index(o.image_index),
      image_series_index(o.image_series_index),
      user_int(o.user_int),
      user_float(o.user_float) {
  }

  void ToOuter (mrd::ImageHeader& o) const {
    yardl::hdf5::ToOuter(flags, o.flags);
    yardl::hdf5::ToOuter(measurement_uid, o.measurement_uid);
    yardl::hdf5::ToOuter(field_of_view, o.field_of_view);
    yardl::hdf5::ToOuter(position, o.position);
    yardl::hdf5::ToOuter(col_dir, o.col_dir);
    yardl::hdf5::ToOuter(line_dir, o.line_dir);
    yardl::hdf5::ToOuter(slice_dir, o.slice_dir);
    yardl::hdf5::ToOuter(patient_table_position, o.patient_table_position);
    yardl::hdf5::ToOuter(average, o.average);
    yardl::hdf5::ToOuter(slice, o.slice);
    yardl::hdf5::ToOuter(contrast, o.contrast);
    yardl::hdf5::ToOuter(phase, o.phase);
    yardl::hdf5::ToOuter(repetition, o.repetition);
    yardl::hdf5::ToOuter(set, o.set);
    yardl::hdf5::ToOuter(acquisition_time_stamp, o.acquisition_time_stamp);
    yardl::hdf5::ToOuter(physiology_time_stamp, o.physiology_time_stamp);
    yardl::hdf5::ToOuter(image_type, o.image_type);
    yardl::hdf5::ToOuter(image_index, o.image_index);
    yardl::hdf5::ToOuter(image_series_index, o.image_series_index);
    yardl::hdf5::ToOuter(user_int, o.user_int);
    yardl::hdf5::ToOuter(user_float, o.user_float);
  }

  mrd::ImageFlags flags;
  uint32_t measurement_uid;
  yardl::FixedNDArray<float, 3> field_of_view;
  yardl::FixedNDArray<float, 3> position;
  yardl::FixedNDArray<float, 3> col_dir;
  yardl::FixedNDArray<float, 3> line_dir;
  yardl::FixedNDArray<float, 3> slice_dir;
  yardl::FixedNDArray<float, 3> patient_table_position;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> average;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> slice;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> contrast;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> phase;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> repetition;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> set;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> acquisition_time_stamp;
  yardl::hdf5::InnerVlen<uint32_t, uint32_t> physiology_time_stamp;
  mrd::ImageType image_type;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> image_index;
  yardl::hdf5::InnerOptional<uint32_t, uint32_t> image_series_index;
  yardl::hdf5::InnerVlen<int32_t, int32_t> user_int;
  yardl::hdf5::InnerVlen<float, float> user_float;
};

template <typename _T_Inner, typename T>
struct _Inner_Image {
  _Inner_Image() {} 
  _Inner_Image(mrd::Image<T> const& o) 
      : head(o.head),
      data(o.data),
      meta(o.meta) {
  }

  void ToOuter (mrd::Image<T>& o) const {
    yardl::hdf5::ToOuter(head, o.head);
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(meta, o.meta);
  }

  mrd::hdf5::_Inner_ImageHeader head;
  yardl::hdf5::InnerNdArray<_T_Inner, T, 4> data;
  yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, yardl::hdf5::InnerVlen<::InnerUnion3<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>, mrd::ImageMetaValue>, std::vector<mrd::ImageMetaValue>> meta;
};

struct _Inner_NoiseCovariance {
  _Inner_NoiseCovariance() {} 
  _Inner_NoiseCovariance(mrd::NoiseCovariance const& o) 
      : coil_labels(o.coil_labels),
      receiver_noise_bandwidth(o.receiver_noise_bandwidth),
      noise_dwell_time_us(o.noise_dwell_time_us),
      sample_count(o.sample_count),
      matrix(o.matrix) {
  }

  void ToOuter (mrd::NoiseCovariance& o) const {
    yardl::hdf5::ToOuter(coil_labels, o.coil_labels);
    yardl::hdf5::ToOuter(receiver_noise_bandwidth, o.receiver_noise_bandwidth);
    yardl::hdf5::ToOuter(noise_dwell_time_us, o.noise_dwell_time_us);
    yardl::hdf5::ToOuter(sample_count, o.sample_count);
    yardl::hdf5::ToOuter(matrix, o.matrix);
  }

  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_CoilLabelType, mrd::CoilLabelType> coil_labels;
  float receiver_noise_bandwidth;
  float noise_dwell_time_us;
  yardl::Size sample_count;
  yardl::hdf5::InnerNdArray<std::complex<float>, std::complex<float>, 2> matrix;
};

template <typename _T_Inner, typename T>
struct _Inner_Waveform {
  _Inner_Waveform() {} 
  _Inner_Waveform(mrd::Waveform<T> const& o) 
      : flags(o.flags),
      measurement_uid(o.measurement_uid),
      scan_counter(o.scan_counter),
      time_stamp(o.time_stamp),
      sample_time_us(o.sample_time_us),
      waveform_id(o.waveform_id),
      data(o.data) {
  }

  void ToOuter (mrd::Waveform<T>& o) const {
    yardl::hdf5::ToOuter(flags, o.flags);
    yardl::hdf5::ToOuter(measurement_uid, o.measurement_uid);
    yardl::hdf5::ToOuter(scan_counter, o.scan_counter);
    yardl::hdf5::ToOuter(time_stamp, o.time_stamp);
    yardl::hdf5::ToOuter(sample_time_us, o.sample_time_us);
    yardl::hdf5::ToOuter(waveform_id, o.waveform_id);
    yardl::hdf5::ToOuter(data, o.data);
  }

  uint64_t flags;
  uint32_t measurement_uid;
  uint32_t scan_counter;
  uint32_t time_stamp;
  float sample_time_us;
  uint32_t waveform_id;
  yardl::hdf5::InnerNdArray<_T_Inner, T, 2> data;
};

struct _Inner_AcquisitionBucket {
  _Inner_AcquisitionBucket() {} 
  _Inner_AcquisitionBucket(mrd::AcquisitionBucket const& o) 
      : data(o.data),
      ref(o.ref),
      datastats(o.datastats),
      refstats(o.refstats),
      waveforms(o.waveforms) {
  }

  void ToOuter (mrd::AcquisitionBucket& o) const {
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(ref, o.ref);
    yardl::hdf5::ToOuter(datastats, o.datastats);
    yardl::hdf5::ToOuter(refstats, o.refstats);
    yardl::hdf5::ToOuter(waveforms, o.waveforms);
  }

  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition> data;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition> ref;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_EncodingLimitsType, mrd::EncodingLimitsType> datastats;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_EncodingLimitsType, mrd::EncodingLimitsType> refstats;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32> waveforms;
};

struct _Inner_ReconBuffer {
  _Inner_ReconBuffer() {} 
  _Inner_ReconBuffer(mrd::ReconBuffer const& o) 
      : data(o.data),
      trajectory(o.trajectory),
      density(o.density),
      headers(o.headers),
      sampling(o.sampling) {
  }

  void ToOuter (mrd::ReconBuffer& o) const {
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(trajectory, o.trajectory);
    yardl::hdf5::ToOuter(density, o.density);
    yardl::hdf5::ToOuter(headers, o.headers);
    yardl::hdf5::ToOuter(sampling, o.sampling);
  }

  yardl::hdf5::InnerNdArray<std::complex<float>, std::complex<float>, 7> data;
  yardl::hdf5::InnerNdArray<float, float, 7> trajectory;
  yardl::hdf5::InnerOptional<yardl::hdf5::InnerNdArray<float, float, 6>, yardl::NDArray<float, 6>> density;
  yardl::hdf5::InnerNdArray<mrd::hdf5::_Inner_AcquisitionHeader, mrd::AcquisitionHeader, 5> headers;
  mrd::SamplingDescription sampling;
};

struct _Inner_ReconAssembly {
  _Inner_ReconAssembly() {} 
  _Inner_ReconAssembly(mrd::ReconAssembly const& o) 
      : data(o.data),
      ref(o.ref) {
  }

  void ToOuter (mrd::ReconAssembly& o) const {
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(ref, o.ref);
  }

  mrd::hdf5::_Inner_ReconBuffer data;
  yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_ReconBuffer, mrd::ReconBuffer> ref;
};

struct _Inner_ReconData {
  _Inner_ReconData() {} 
  _Inner_ReconData(mrd::ReconData const& o) 
      : buffers(o.buffers) {
  }

  void ToOuter (mrd::ReconData& o) const {
    yardl::hdf5::ToOuter(buffers, o.buffers);
  }

  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_ReconAssembly, mrd::ReconAssembly> buffers;
};

struct _Inner_ImageArray {
  _Inner_ImageArray() {} 
  _Inner_ImageArray(mrd::ImageArray const& o) 
      : data(o.data),
      headers(o.headers),
      meta(o.meta),
      waveforms(o.waveforms) {
  }

  void ToOuter (mrd::ImageArray& o) const {
    yardl::hdf5::ToOuter(data, o.data);
    yardl::hdf5::ToOuter(headers, o.headers);
    yardl::hdf5::ToOuter(meta, o.meta);
    yardl::hdf5::ToOuter(waveforms, o.waveforms);
  }

  yardl::hdf5::InnerNdArray<std::complex<float>, std::complex<float>, 7> data;
  yardl::hdf5::InnerNdArray<mrd::hdf5::_Inner_ImageHeader, mrd::ImageHeader, 3> headers;
  yardl::hdf5::InnerNdArray<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, yardl::hdf5::InnerVlen<::InnerUnion3<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>, mrd::ImageMetaValue>, std::vector<mrd::ImageMetaValue>>, mrd::ImageMeta, 3> meta;
  yardl::hdf5::InnerVlen<mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32> waveforms;
};

[[maybe_unused]] H5::CompType GetEncodingCountersHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_EncodingCounters;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("kspaceEncodeStep1", HOFFSET(RecordType, kspace_encode_step_1), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("kspaceEncodeStep2", HOFFSET(RecordType, kspace_encode_step_2), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("average", HOFFSET(RecordType, average), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("slice", HOFFSET(RecordType, slice), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("contrast", HOFFSET(RecordType, contrast), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("phase", HOFFSET(RecordType, phase), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("repetition", HOFFSET(RecordType, repetition), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("set", HOFFSET(RecordType, set), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("segment", HOFFSET(RecordType, segment), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("user", HOFFSET(RecordType, user), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  return t;
}

[[maybe_unused]] H5::CompType GetAcquisitionHeaderHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_AcquisitionHeader;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("flags", HOFFSET(RecordType, flags), H5::PredType::NATIVE_UINT64);
  t.insertMember("idx", HOFFSET(RecordType, idx), mrd::hdf5::GetEncodingCountersHdf5Ddl());
  t.insertMember("measurementUid", HOFFSET(RecordType, measurement_uid), H5::PredType::NATIVE_UINT32);
  t.insertMember("scanCounter", HOFFSET(RecordType, scan_counter), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("acquisitionTimeStamp", HOFFSET(RecordType, acquisition_time_stamp), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("physiologyTimeStamp", HOFFSET(RecordType, physiology_time_stamp), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  t.insertMember("channelOrder", HOFFSET(RecordType, channel_order), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  t.insertMember("discardPre", HOFFSET(RecordType, discard_pre), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("discardPost", HOFFSET(RecordType, discard_post), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("centerSample", HOFFSET(RecordType, center_sample), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("encodingSpaceRef", HOFFSET(RecordType, encoding_space_ref), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("sampleTimeUs", HOFFSET(RecordType, sample_time_us), yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT));
  t.insertMember("position", HOFFSET(RecordType, position), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("readDir", HOFFSET(RecordType, read_dir), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("phaseDir", HOFFSET(RecordType, phase_dir), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("sliceDir", HOFFSET(RecordType, slice_dir), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("patientTablePosition", HOFFSET(RecordType, patient_table_position), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("userInt", HOFFSET(RecordType, user_int), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("userFloat", HOFFSET(RecordType, user_float), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  return t;
}

[[maybe_unused]] H5::CompType GetAcquisitionHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_Acquisition;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("head", HOFFSET(RecordType, head), mrd::hdf5::GetAcquisitionHeaderHdf5Ddl());
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::NDArrayDdl<std::complex<float>, std::complex<float>, 2>(yardl::hdf5::ComplexTypeDdl<float>()));
  t.insertMember("trajectory", HOFFSET(RecordType, trajectory), yardl::hdf5::NDArrayDdl<float, float, 2>(H5::PredType::NATIVE_FLOAT));
  return t;
}

[[maybe_unused]] H5::CompType GetSubjectInformationTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_SubjectInformationType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("patientName", HOFFSET(RecordType, patient_name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("patientWeightKg", HOFFSET(RecordType, patient_weight_kg), yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT));
  t.insertMember("patientHeightM", HOFFSET(RecordType, patient_height_m), yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT));
  t.insertMember("patientID", HOFFSET(RecordType, patient_id), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("patientBirthdate", HOFFSET(RecordType, patient_birthdate), yardl::hdf5::OptionalTypeDdl<yardl::Date, yardl::Date>(yardl::hdf5::DateTypeDdl()));
  t.insertMember("patientGender", HOFFSET(RecordType, patient_gender), yardl::hdf5::OptionalTypeDdl<mrd::PatientGender, mrd::PatientGender>(mrd::hdf5::GetPatientGenderHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetStudyInformationTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_StudyInformationType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("studyDate", HOFFSET(RecordType, study_date), yardl::hdf5::OptionalTypeDdl<yardl::Date, yardl::Date>(yardl::hdf5::DateTypeDdl()));
  t.insertMember("studyTime", HOFFSET(RecordType, study_time), yardl::hdf5::OptionalTypeDdl<yardl::Time, yardl::Time>(yardl::hdf5::TimeTypeDdl()));
  t.insertMember("studyID", HOFFSET(RecordType, study_id), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("accessionNumber", HOFFSET(RecordType, accession_number), yardl::hdf5::OptionalTypeDdl<int64_t, int64_t>(H5::PredType::NATIVE_INT64));
  t.insertMember("referringPhysicianName", HOFFSET(RecordType, referring_physician_name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("studyDescription", HOFFSET(RecordType, study_description), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("studyInstanceUID", HOFFSET(RecordType, study_instance_uid), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("bodyPartExamined", HOFFSET(RecordType, body_part_examined), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  return t;
}

[[maybe_unused]] H5::CompType GetThreeDimensionalFloatHdf5Ddl() {
  using RecordType = mrd::ThreeDimensionalFloat;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("x", HOFFSET(RecordType, x), H5::PredType::NATIVE_FLOAT);
  t.insertMember("y", HOFFSET(RecordType, y), H5::PredType::NATIVE_FLOAT);
  t.insertMember("z", HOFFSET(RecordType, z), H5::PredType::NATIVE_FLOAT);
  return t;
}

[[maybe_unused]] H5::CompType GetMeasurementDependencyTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_MeasurementDependencyType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("dependencyType", HOFFSET(RecordType, dependency_type), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("measurementID", HOFFSET(RecordType, measurement_id), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetReferencedImageSequenceTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ReferencedImageSequenceType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("referencedSOPInstanceUID", HOFFSET(RecordType, referenced_sop_instance_uid), yardl::hdf5::InnerVlenDdl(yardl::hdf5::InnerVlenStringDdl()));
  return t;
}

[[maybe_unused]] H5::CompType GetMeasurementInformationTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_MeasurementInformationType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("measurementID", HOFFSET(RecordType, measurement_id), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("seriesDate", HOFFSET(RecordType, series_date), yardl::hdf5::OptionalTypeDdl<yardl::Date, yardl::Date>(yardl::hdf5::DateTypeDdl()));
  t.insertMember("seriesTime", HOFFSET(RecordType, series_time), yardl::hdf5::OptionalTypeDdl<yardl::Time, yardl::Time>(yardl::hdf5::TimeTypeDdl()));
  t.insertMember("patientPosition", HOFFSET(RecordType, patient_position), mrd::hdf5::GetPatientPositionHdf5Ddl());
  t.insertMember("relativeTablePosition", HOFFSET(RecordType, relative_table_position), yardl::hdf5::OptionalTypeDdl<mrd::ThreeDimensionalFloat, mrd::ThreeDimensionalFloat>(mrd::hdf5::GetThreeDimensionalFloatHdf5Ddl()));
  t.insertMember("initialSeriesNumber", HOFFSET(RecordType, initial_series_number), yardl::hdf5::OptionalTypeDdl<int64_t, int64_t>(H5::PredType::NATIVE_INT64));
  t.insertMember("protocolName", HOFFSET(RecordType, protocol_name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("sequenceName", HOFFSET(RecordType, sequence_name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("seriesDescription", HOFFSET(RecordType, series_description), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("measurementDependency", HOFFSET(RecordType, measurement_dependency), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetMeasurementDependencyTypeHdf5Ddl()));
  t.insertMember("seriesInstanceUIDRoot", HOFFSET(RecordType, series_instance_uid_root), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("frameOfReferenceUID", HOFFSET(RecordType, frame_of_reference_uid), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("referencedImageSequence", HOFFSET(RecordType, referenced_image_sequence), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_ReferencedImageSequenceType, mrd::ReferencedImageSequenceType>(mrd::hdf5::GetReferencedImageSequenceTypeHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetCoilLabelTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_CoilLabelType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("coilNumber", HOFFSET(RecordType, coil_number), H5::PredType::NATIVE_UINT32);
  t.insertMember("coilName", HOFFSET(RecordType, coil_name), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetAcquisitionSystemInformationTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_AcquisitionSystemInformationType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("systemVendor", HOFFSET(RecordType, system_vendor), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("systemModel", HOFFSET(RecordType, system_model), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("systemFieldStrengthT", HOFFSET(RecordType, system_field_strength_t), yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT));
  t.insertMember("relativeReceiverNoiseBandwidth", HOFFSET(RecordType, relative_receiver_noise_bandwidth), yardl::hdf5::OptionalTypeDdl<float, float>(H5::PredType::NATIVE_FLOAT));
  t.insertMember("receiverChannels", HOFFSET(RecordType, receiver_channels), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("coilLabel", HOFFSET(RecordType, coil_label), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetCoilLabelTypeHdf5Ddl()));
  t.insertMember("institutionName", HOFFSET(RecordType, institution_name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("stationName", HOFFSET(RecordType, station_name), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("deviceID", HOFFSET(RecordType, device_id), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("deviceSerialNumber", HOFFSET(RecordType, device_serial_number), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  return t;
}

[[maybe_unused]] H5::CompType GetExperimentalConditionsTypeHdf5Ddl() {
  using RecordType = mrd::ExperimentalConditionsType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("h1resonanceFrequencyHz", HOFFSET(RecordType, h1resonance_frequency_hz), H5::PredType::NATIVE_INT64);
  return t;
}

[[maybe_unused]] H5::CompType GetMatrixSizeTypeHdf5Ddl() {
  using RecordType = mrd::MatrixSizeType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("x", HOFFSET(RecordType, x), H5::PredType::NATIVE_UINT32);
  t.insertMember("y", HOFFSET(RecordType, y), H5::PredType::NATIVE_UINT32);
  t.insertMember("z", HOFFSET(RecordType, z), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetFieldOfViewMmHdf5Ddl() {
  using RecordType = mrd::FieldOfViewMm;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("x", HOFFSET(RecordType, x), H5::PredType::NATIVE_FLOAT);
  t.insertMember("y", HOFFSET(RecordType, y), H5::PredType::NATIVE_FLOAT);
  t.insertMember("z", HOFFSET(RecordType, z), H5::PredType::NATIVE_FLOAT);
  return t;
}

[[maybe_unused]] H5::CompType GetEncodingSpaceTypeHdf5Ddl() {
  using RecordType = mrd::EncodingSpaceType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("matrixSize", HOFFSET(RecordType, matrix_size), mrd::hdf5::GetMatrixSizeTypeHdf5Ddl());
  t.insertMember("fieldOfViewMm", HOFFSET(RecordType, field_of_view_mm), mrd::hdf5::GetFieldOfViewMmHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetLimitTypeHdf5Ddl() {
  using RecordType = mrd::LimitType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("minimum", HOFFSET(RecordType, minimum), H5::PredType::NATIVE_UINT32);
  t.insertMember("maximum", HOFFSET(RecordType, maximum), H5::PredType::NATIVE_UINT32);
  t.insertMember("center", HOFFSET(RecordType, center), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetEncodingLimitsTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_EncodingLimitsType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("kspaceEncodingStep0", HOFFSET(RecordType, kspace_encoding_step_0), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("kspaceEncodingStep1", HOFFSET(RecordType, kspace_encoding_step_1), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("kspaceEncodingStep2", HOFFSET(RecordType, kspace_encoding_step_2), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("average", HOFFSET(RecordType, average), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("slice", HOFFSET(RecordType, slice), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("contrast", HOFFSET(RecordType, contrast), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("phase", HOFFSET(RecordType, phase), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("repetition", HOFFSET(RecordType, repetition), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("set", HOFFSET(RecordType, set), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("segment", HOFFSET(RecordType, segment), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user0", HOFFSET(RecordType, user_0), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user1", HOFFSET(RecordType, user_1), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user2", HOFFSET(RecordType, user_2), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user3", HOFFSET(RecordType, user_3), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user4", HOFFSET(RecordType, user_4), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user5", HOFFSET(RecordType, user_5), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user6", HOFFSET(RecordType, user_6), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  t.insertMember("user7", HOFFSET(RecordType, user_7), yardl::hdf5::OptionalTypeDdl<mrd::LimitType, mrd::LimitType>(mrd::hdf5::GetLimitTypeHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetUserParameterLongTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_UserParameterLongType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("value", HOFFSET(RecordType, value), H5::PredType::NATIVE_INT64);
  return t;
}

[[maybe_unused]] H5::CompType GetUserParameterDoubleTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_UserParameterDoubleType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("value", HOFFSET(RecordType, value), H5::PredType::NATIVE_DOUBLE);
  return t;
}

[[maybe_unused]] H5::CompType GetUserParameterStringTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_UserParameterStringType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("value", HOFFSET(RecordType, value), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetTrajectoryDescriptionTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_TrajectoryDescriptionType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("identifier", HOFFSET(RecordType, identifier), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("userParameterLong", HOFFSET(RecordType, user_parameter_long), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterLongTypeHdf5Ddl()));
  t.insertMember("userParameterDouble", HOFFSET(RecordType, user_parameter_double), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterDoubleTypeHdf5Ddl()));
  t.insertMember("userParameterString", HOFFSET(RecordType, user_parameter_string), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterStringTypeHdf5Ddl()));
  t.insertMember("comment", HOFFSET(RecordType, comment), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  return t;
}

[[maybe_unused]] H5::CompType GetAccelerationFactorTypeHdf5Ddl() {
  using RecordType = mrd::AccelerationFactorType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("kspaceEncodingStep1", HOFFSET(RecordType, kspace_encoding_step_1), H5::PredType::NATIVE_UINT32);
  t.insertMember("kspaceEncodingStep2", HOFFSET(RecordType, kspace_encoding_step_2), H5::PredType::NATIVE_UINT32);
  return t;
}

[[maybe_unused]] H5::CompType GetMultibandSpacingTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_MultibandSpacingType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("dZ", HOFFSET(RecordType, d_z), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  return t;
}

[[maybe_unused]] H5::CompType GetMultibandTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_MultibandType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("spacing", HOFFSET(RecordType, spacing), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetMultibandSpacingTypeHdf5Ddl()));
  t.insertMember("deltaKz", HOFFSET(RecordType, delta_kz), H5::PredType::NATIVE_FLOAT);
  t.insertMember("multibandFactor", HOFFSET(RecordType, multiband_factor), H5::PredType::NATIVE_UINT32);
  t.insertMember("calibration", HOFFSET(RecordType, calibration), mrd::hdf5::GetCalibrationHdf5Ddl());
  t.insertMember("calibrationEncoding", HOFFSET(RecordType, calibration_encoding), H5::PredType::NATIVE_UINT64);
  return t;
}

[[maybe_unused]] H5::CompType GetParallelImagingTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ParallelImagingType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("accelerationFactor", HOFFSET(RecordType, acceleration_factor), mrd::hdf5::GetAccelerationFactorTypeHdf5Ddl());
  t.insertMember("calibrationMode", HOFFSET(RecordType, calibration_mode), yardl::hdf5::OptionalTypeDdl<mrd::CalibrationMode, mrd::CalibrationMode>(mrd::hdf5::GetCalibrationModeHdf5Ddl()));
  t.insertMember("interleavingDimension", HOFFSET(RecordType, interleaving_dimension), yardl::hdf5::OptionalTypeDdl<mrd::InterleavingDimension, mrd::InterleavingDimension>(mrd::hdf5::GetInterleavingDimensionHdf5Ddl()));
  t.insertMember("multiband", HOFFSET(RecordType, multiband), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_MultibandType, mrd::MultibandType>(mrd::hdf5::GetMultibandTypeHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetEncodingTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_EncodingType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("encodedSpace", HOFFSET(RecordType, encoded_space), mrd::hdf5::GetEncodingSpaceTypeHdf5Ddl());
  t.insertMember("reconSpace", HOFFSET(RecordType, recon_space), mrd::hdf5::GetEncodingSpaceTypeHdf5Ddl());
  t.insertMember("encodingLimits", HOFFSET(RecordType, encoding_limits), mrd::hdf5::GetEncodingLimitsTypeHdf5Ddl());
  t.insertMember("trajectory", HOFFSET(RecordType, trajectory), mrd::hdf5::GetTrajectoryHdf5Ddl());
  t.insertMember("trajectoryDescription", HOFFSET(RecordType, trajectory_description), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_TrajectoryDescriptionType, mrd::TrajectoryDescriptionType>(mrd::hdf5::GetTrajectoryDescriptionTypeHdf5Ddl()));
  t.insertMember("parallelImaging", HOFFSET(RecordType, parallel_imaging), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_ParallelImagingType, mrd::ParallelImagingType>(mrd::hdf5::GetParallelImagingTypeHdf5Ddl()));
  t.insertMember("echoTrainLength", HOFFSET(RecordType, echo_train_length), yardl::hdf5::OptionalTypeDdl<int64_t, int64_t>(H5::PredType::NATIVE_INT64));
  return t;
}

[[maybe_unused]] H5::CompType GetGradientDirectionTypeHdf5Ddl() {
  using RecordType = mrd::GradientDirectionType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("rl", HOFFSET(RecordType, rl), H5::PredType::NATIVE_FLOAT);
  t.insertMember("ap", HOFFSET(RecordType, ap), H5::PredType::NATIVE_FLOAT);
  t.insertMember("fh", HOFFSET(RecordType, fh), H5::PredType::NATIVE_FLOAT);
  return t;
}

[[maybe_unused]] H5::CompType GetDiffusionTypeHdf5Ddl() {
  using RecordType = mrd::DiffusionType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("gradientDirection", HOFFSET(RecordType, gradient_direction), mrd::hdf5::GetGradientDirectionTypeHdf5Ddl());
  t.insertMember("bvalue", HOFFSET(RecordType, bvalue), H5::PredType::NATIVE_FLOAT);
  return t;
}

[[maybe_unused]] H5::CompType GetSequenceParametersTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_SequenceParametersType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("tR", HOFFSET(RecordType, t_r), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("tE", HOFFSET(RecordType, t_e), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("tI", HOFFSET(RecordType, t_i), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("flipAngleDeg", HOFFSET(RecordType, flip_angle_deg), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("sequenceType", HOFFSET(RecordType, sequence_type), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  t.insertMember("echoSpacing", HOFFSET(RecordType, echo_spacing), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  t.insertMember("diffusionDimension", HOFFSET(RecordType, diffusion_dimension), yardl::hdf5::OptionalTypeDdl<mrd::DiffusionDimension, mrd::DiffusionDimension>(mrd::hdf5::GetDiffusionDimensionHdf5Ddl()));
  t.insertMember("diffusion", HOFFSET(RecordType, diffusion), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetDiffusionTypeHdf5Ddl()));
  t.insertMember("diffusionScheme", HOFFSET(RecordType, diffusion_scheme), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerVlenString, std::string>(yardl::hdf5::InnerVlenStringDdl()));
  return t;
}

[[maybe_unused]] H5::CompType GetUserParameterBase64TypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_UserParameterBase64Type;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("name", HOFFSET(RecordType, name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("value", HOFFSET(RecordType, value), yardl::hdf5::InnerVlenStringDdl());
  return t;
}

[[maybe_unused]] H5::CompType GetUserParametersTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_UserParametersType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("userParameterLong", HOFFSET(RecordType, user_parameter_long), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterLongTypeHdf5Ddl()));
  t.insertMember("userParameterDouble", HOFFSET(RecordType, user_parameter_double), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterDoubleTypeHdf5Ddl()));
  t.insertMember("userParameterString", HOFFSET(RecordType, user_parameter_string), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterStringTypeHdf5Ddl()));
  t.insertMember("userParameterBase64", HOFFSET(RecordType, user_parameter_base64), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetUserParameterBase64TypeHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetWaveformInformationTypeHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_WaveformInformationType;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("waveformName", HOFFSET(RecordType, waveform_name), yardl::hdf5::InnerVlenStringDdl());
  t.insertMember("waveformType", HOFFSET(RecordType, waveform_type), mrd::hdf5::GetWaveformTypeHdf5Ddl());
  t.insertMember("userParameters", HOFFSET(RecordType, user_parameters), mrd::hdf5::GetUserParametersTypeHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetHeaderHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_Header;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("version", HOFFSET(RecordType, version), yardl::hdf5::OptionalTypeDdl<int64_t, int64_t>(H5::PredType::NATIVE_INT64));
  t.insertMember("subjectInformation", HOFFSET(RecordType, subject_information), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_SubjectInformationType, mrd::SubjectInformationType>(mrd::hdf5::GetSubjectInformationTypeHdf5Ddl()));
  t.insertMember("studyInformation", HOFFSET(RecordType, study_information), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_StudyInformationType, mrd::StudyInformationType>(mrd::hdf5::GetStudyInformationTypeHdf5Ddl()));
  t.insertMember("measurementInformation", HOFFSET(RecordType, measurement_information), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_MeasurementInformationType, mrd::MeasurementInformationType>(mrd::hdf5::GetMeasurementInformationTypeHdf5Ddl()));
  t.insertMember("acquisitionSystemInformation", HOFFSET(RecordType, acquisition_system_information), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_AcquisitionSystemInformationType, mrd::AcquisitionSystemInformationType>(mrd::hdf5::GetAcquisitionSystemInformationTypeHdf5Ddl()));
  t.insertMember("experimentalConditions", HOFFSET(RecordType, experimental_conditions), mrd::hdf5::GetExperimentalConditionsTypeHdf5Ddl());
  t.insertMember("encoding", HOFFSET(RecordType, encoding), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetEncodingTypeHdf5Ddl()));
  t.insertMember("sequenceParameters", HOFFSET(RecordType, sequence_parameters), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_SequenceParametersType, mrd::SequenceParametersType>(mrd::hdf5::GetSequenceParametersTypeHdf5Ddl()));
  t.insertMember("userParameters", HOFFSET(RecordType, user_parameters), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_UserParametersType, mrd::UserParametersType>(mrd::hdf5::GetUserParametersTypeHdf5Ddl()));
  t.insertMember("waveformInformation", HOFFSET(RecordType, waveform_information), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetWaveformInformationTypeHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetImageHeaderHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ImageHeader;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("flags", HOFFSET(RecordType, flags), H5::PredType::NATIVE_UINT64);
  t.insertMember("measurementUid", HOFFSET(RecordType, measurement_uid), H5::PredType::NATIVE_UINT32);
  t.insertMember("fieldOfView", HOFFSET(RecordType, field_of_view), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("position", HOFFSET(RecordType, position), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("colDir", HOFFSET(RecordType, col_dir), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("lineDir", HOFFSET(RecordType, line_dir), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("sliceDir", HOFFSET(RecordType, slice_dir), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("patientTablePosition", HOFFSET(RecordType, patient_table_position), yardl::hdf5::FixedNDArrayDdl(H5::PredType::NATIVE_FLOAT, {3}));
  t.insertMember("average", HOFFSET(RecordType, average), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("slice", HOFFSET(RecordType, slice), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("contrast", HOFFSET(RecordType, contrast), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("phase", HOFFSET(RecordType, phase), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("repetition", HOFFSET(RecordType, repetition), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("set", HOFFSET(RecordType, set), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("acquisitionTimeStamp", HOFFSET(RecordType, acquisition_time_stamp), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("physiologyTimeStamp", HOFFSET(RecordType, physiology_time_stamp), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_UINT32));
  t.insertMember("imageType", HOFFSET(RecordType, image_type), mrd::hdf5::GetImageTypeHdf5Ddl());
  t.insertMember("imageIndex", HOFFSET(RecordType, image_index), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("imageSeriesIndex", HOFFSET(RecordType, image_series_index), yardl::hdf5::OptionalTypeDdl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32));
  t.insertMember("userInt", HOFFSET(RecordType, user_int), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_INT32));
  t.insertMember("userFloat", HOFFSET(RecordType, user_float), yardl::hdf5::InnerVlenDdl(H5::PredType::NATIVE_FLOAT));
  return t;
}

template <typename _T_Inner, typename T>
[[maybe_unused]] H5::CompType GetImageHdf5Ddl(H5::DataType const& T_type) {
  using RecordType = mrd::hdf5::_Inner_Image<_T_Inner, T>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("head", HOFFSET(RecordType, head), mrd::hdf5::GetImageHeaderHdf5Ddl());
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::NDArrayDdl<_T_Inner, T, 4>(T_type));
  t.insertMember("meta", HOFFSET(RecordType, meta), yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, yardl::hdf5::InnerVlen<::InnerUnion3<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>, mrd::ImageMetaValue>>(yardl::hdf5::InnerVlenStringDdl(), yardl::hdf5::InnerVlenDdl(::InnerUnion3Ddl<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>(false, yardl::hdf5::InnerVlenStringDdl(), "string", H5::PredType::NATIVE_INT64, "int64", H5::PredType::NATIVE_DOUBLE, "float64"))));
  return t;
}

[[maybe_unused]] H5::CompType GetNoiseCovarianceHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_NoiseCovariance;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("coilLabels", HOFFSET(RecordType, coil_labels), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetCoilLabelTypeHdf5Ddl()));
  t.insertMember("receiverNoiseBandwidth", HOFFSET(RecordType, receiver_noise_bandwidth), H5::PredType::NATIVE_FLOAT);
  t.insertMember("noiseDwellTimeUs", HOFFSET(RecordType, noise_dwell_time_us), H5::PredType::NATIVE_FLOAT);
  t.insertMember("sampleCount", HOFFSET(RecordType, sample_count), yardl::hdf5::SizeTypeDdl());
  t.insertMember("matrix", HOFFSET(RecordType, matrix), yardl::hdf5::NDArrayDdl<std::complex<float>, std::complex<float>, 2>(yardl::hdf5::ComplexTypeDdl<float>()));
  return t;
}

template <typename _T_Inner, typename T>
[[maybe_unused]] H5::CompType GetWaveformHdf5Ddl(H5::DataType const& T_type) {
  using RecordType = mrd::hdf5::_Inner_Waveform<_T_Inner, T>;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("flags", HOFFSET(RecordType, flags), H5::PredType::NATIVE_UINT64);
  t.insertMember("measurementUid", HOFFSET(RecordType, measurement_uid), H5::PredType::NATIVE_UINT32);
  t.insertMember("scanCounter", HOFFSET(RecordType, scan_counter), H5::PredType::NATIVE_UINT32);
  t.insertMember("timeStamp", HOFFSET(RecordType, time_stamp), H5::PredType::NATIVE_UINT32);
  t.insertMember("sampleTimeUs", HOFFSET(RecordType, sample_time_us), H5::PredType::NATIVE_FLOAT);
  t.insertMember("waveformId", HOFFSET(RecordType, waveform_id), H5::PredType::NATIVE_UINT32);
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::NDArrayDdl<_T_Inner, T, 2>(T_type));
  return t;
}

[[maybe_unused]] H5::CompType GetAcquisitionBucketHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_AcquisitionBucket;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetAcquisitionHdf5Ddl()));
  t.insertMember("ref", HOFFSET(RecordType, ref), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetAcquisitionHdf5Ddl()));
  t.insertMember("datastats", HOFFSET(RecordType, datastats), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetEncodingLimitsTypeHdf5Ddl()));
  t.insertMember("refstats", HOFFSET(RecordType, refstats), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetEncodingLimitsTypeHdf5Ddl()));
  t.insertMember("waveforms", HOFFSET(RecordType, waveforms), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetWaveformHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32)));
  return t;
}

[[maybe_unused]] H5::CompType GetSamplingLimitsHdf5Ddl() {
  using RecordType = mrd::SamplingLimits;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("kspaceEncodingStep0", HOFFSET(RecordType, kspace_encoding_step_0), mrd::hdf5::GetLimitTypeHdf5Ddl());
  t.insertMember("kspaceEncodingStep1", HOFFSET(RecordType, kspace_encoding_step_1), mrd::hdf5::GetLimitTypeHdf5Ddl());
  t.insertMember("kspaceEncodingStep2", HOFFSET(RecordType, kspace_encoding_step_2), mrd::hdf5::GetLimitTypeHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetSamplingDescriptionHdf5Ddl() {
  using RecordType = mrd::SamplingDescription;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("encodedFOV", HOFFSET(RecordType, encoded_fov), mrd::hdf5::GetFieldOfViewMmHdf5Ddl());
  t.insertMember("reconFOV", HOFFSET(RecordType, recon_fov), mrd::hdf5::GetFieldOfViewMmHdf5Ddl());
  t.insertMember("encodedMatrix", HOFFSET(RecordType, encoded_matrix), mrd::hdf5::GetMatrixSizeTypeHdf5Ddl());
  t.insertMember("reconMatrix", HOFFSET(RecordType, recon_matrix), mrd::hdf5::GetMatrixSizeTypeHdf5Ddl());
  t.insertMember("samplingLimits", HOFFSET(RecordType, sampling_limits), mrd::hdf5::GetSamplingLimitsHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetReconBufferHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ReconBuffer;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::NDArrayDdl<std::complex<float>, std::complex<float>, 7>(yardl::hdf5::ComplexTypeDdl<float>()));
  t.insertMember("trajectory", HOFFSET(RecordType, trajectory), yardl::hdf5::NDArrayDdl<float, float, 7>(H5::PredType::NATIVE_FLOAT));
  t.insertMember("density", HOFFSET(RecordType, density), yardl::hdf5::OptionalTypeDdl<yardl::hdf5::InnerNdArray<float, float, 6>, yardl::NDArray<float, 6>>(yardl::hdf5::NDArrayDdl<float, float, 6>(H5::PredType::NATIVE_FLOAT)));
  t.insertMember("headers", HOFFSET(RecordType, headers), yardl::hdf5::NDArrayDdl<mrd::hdf5::_Inner_AcquisitionHeader, mrd::AcquisitionHeader, 5>(mrd::hdf5::GetAcquisitionHeaderHdf5Ddl()));
  t.insertMember("sampling", HOFFSET(RecordType, sampling), mrd::hdf5::GetSamplingDescriptionHdf5Ddl());
  return t;
}

[[maybe_unused]] H5::CompType GetReconAssemblyHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ReconAssembly;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("data", HOFFSET(RecordType, data), mrd::hdf5::GetReconBufferHdf5Ddl());
  t.insertMember("ref", HOFFSET(RecordType, ref), yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_ReconBuffer, mrd::ReconBuffer>(mrd::hdf5::GetReconBufferHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetReconDataHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ReconData;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("buffers", HOFFSET(RecordType, buffers), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetReconAssemblyHdf5Ddl()));
  return t;
}

[[maybe_unused]] H5::CompType GetImageArrayHdf5Ddl() {
  using RecordType = mrd::hdf5::_Inner_ImageArray;
  H5::CompType t(sizeof(RecordType));
  t.insertMember("data", HOFFSET(RecordType, data), yardl::hdf5::NDArrayDdl<std::complex<float>, std::complex<float>, 7>(yardl::hdf5::ComplexTypeDdl<float>()));
  t.insertMember("headers", HOFFSET(RecordType, headers), yardl::hdf5::NDArrayDdl<mrd::hdf5::_Inner_ImageHeader, mrd::ImageHeader, 3>(mrd::hdf5::GetImageHeaderHdf5Ddl()));
  t.insertMember("meta", HOFFSET(RecordType, meta), yardl::hdf5::NDArrayDdl<yardl::hdf5::InnerMap<yardl::hdf5::InnerVlenString, std::string, yardl::hdf5::InnerVlen<::InnerUnion3<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>, mrd::ImageMetaValue>, std::vector<mrd::ImageMetaValue>>, mrd::ImageMeta, 3>(yardl::hdf5::InnerMapDdl<yardl::hdf5::InnerVlenString, yardl::hdf5::InnerVlen<::InnerUnion3<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>, mrd::ImageMetaValue>>(yardl::hdf5::InnerVlenStringDdl(), yardl::hdf5::InnerVlenDdl(::InnerUnion3Ddl<yardl::hdf5::InnerVlenString, std::string, int64_t, int64_t, double, double>(false, yardl::hdf5::InnerVlenStringDdl(), "string", H5::PredType::NATIVE_INT64, "int64", H5::PredType::NATIVE_DOUBLE, "float64")))));
  t.insertMember("waveforms", HOFFSET(RecordType, waveforms), yardl::hdf5::InnerVlenDdl(mrd::hdf5::GetWaveformHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32)));
  return t;
}

} // namespace 

MrdWriter::MrdWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "Mrd", schema_) {
}

void MrdWriter::WriteHeaderImpl(std::optional<mrd::Header> const& value) {
  yardl::hdf5::WriteScalarDataset<yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_Header, mrd::Header>, std::optional<mrd::Header>>(group_, "header", yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_Header, mrd::Header>(mrd::hdf5::GetHeaderHdf5Ddl()), value);
}

void MrdWriter::WriteDataImpl(mrd::StreamItem const& value) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<14>>(group_, "data", false, std::make_tuple(mrd::hdf5::GetAcquisitionHdf5Ddl(), "Acquisition", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetWaveformHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32), "WaveformUint32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<uint16_t, uint16_t>(H5::PredType::NATIVE_UINT16), "ImageUint16", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<int16_t, int16_t>(H5::PredType::NATIVE_INT16), "ImageInt16", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32), "ImageUint32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), "ImageInt32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<float, float>(H5::PredType::NATIVE_FLOAT), "ImageFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<double, double>(H5::PredType::NATIVE_DOUBLE), "ImageDouble", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<std::complex<float>, std::complex<float>>(yardl::hdf5::ComplexTypeDdl<float>()), "ImageComplexFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<std::complex<double>, std::complex<double>>(yardl::hdf5::ComplexTypeDdl<double>()), "ImageComplexDouble", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetAcquisitionBucketHdf5Ddl(), "AcquisitionBucket", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetReconDataHdf5Ddl(), "ReconData", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(yardl::hdf5::DynamicNDArrayDdl<std::complex<float>, std::complex<float>>(yardl::hdf5::ComplexTypeDdl<float>()), "ArrayComplexFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageArrayHdf5Ddl(), "ImageArray", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))));
  }

  std::visit(
    [&](auto const& arg) {
      using T = std::decay_t<decltype(arg)>;
      if constexpr (std::is_same_v<T, mrd::Acquisition>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::WaveformUint32>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageUint16>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageInt16>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageUint32>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageInt32>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageFloat>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageDouble>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageComplexFloat>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageComplexDouble>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::AcquisitionBucket>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ReconData>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_ReconData, mrd::ReconData>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ArrayComplexFloat>) {
        data_dataset_state_->Append<yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat>(static_cast<int8_t>(value.index()), arg);
      } else if constexpr (std::is_same_v<T, mrd::ImageArray>) {
        data_dataset_state_->Append<mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>(static_cast<int8_t>(value.index()), arg);
      } else {
        static_assert(yardl::hdf5::always_false_v<T>, "non-exhaustive visitor!");
      }
    },
    value);
}

void MrdWriter::EndDataImpl() {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetWriter<14>>(group_, "data", false, std::make_tuple(mrd::hdf5::GetAcquisitionHdf5Ddl(), "Acquisition", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetWaveformHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32), "WaveformUint32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<uint16_t, uint16_t>(H5::PredType::NATIVE_UINT16), "ImageUint16", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<int16_t, int16_t>(H5::PredType::NATIVE_INT16), "ImageInt16", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32), "ImageUint32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), "ImageInt32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<float, float>(H5::PredType::NATIVE_FLOAT), "ImageFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<double, double>(H5::PredType::NATIVE_DOUBLE), "ImageDouble", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<std::complex<float>, std::complex<float>>(yardl::hdf5::ComplexTypeDdl<float>()), "ImageComplexFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<std::complex<double>, std::complex<double>>(yardl::hdf5::ComplexTypeDdl<double>()), "ImageComplexDouble", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetAcquisitionBucketHdf5Ddl(), "AcquisitionBucket", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetReconDataHdf5Ddl(), "ReconData", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(yardl::hdf5::DynamicNDArrayDdl<std::complex<float>, std::complex<float>>(yardl::hdf5::ComplexTypeDdl<float>()), "ArrayComplexFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageArrayHdf5Ddl(), "ImageArray", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))));
  }

  data_dataset_state_.reset();
}

void MrdWriter::Flush() {
  if (data_dataset_state_) {
    data_dataset_state_->Flush();
  }
}

MrdReader::MrdReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "Mrd", schema_) {
}

void MrdReader::ReadHeaderImpl(std::optional<mrd::Header>& value) {
  yardl::hdf5::ReadScalarDataset<yardl::hdf5::InnerOptional<mrd::hdf5::_Inner_Header, mrd::Header>, std::optional<mrd::Header>>(group_, "header", yardl::hdf5::OptionalTypeDdl<mrd::hdf5::_Inner_Header, mrd::Header>(mrd::hdf5::GetHeaderHdf5Ddl()), value);
}

bool MrdReader::ReadDataImpl(mrd::StreamItem& value) {
  if (!data_dataset_state_) {
    data_dataset_state_ = std::make_unique<yardl::hdf5::UnionDatasetReader<14>>(group_, "data", false, std::make_tuple(mrd::hdf5::GetAcquisitionHdf5Ddl(), "Acquisition", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetWaveformHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32), "WaveformUint32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<uint16_t, uint16_t>(H5::PredType::NATIVE_UINT16), "ImageUint16", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<int16_t, int16_t>(H5::PredType::NATIVE_INT16), "ImageInt16", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<uint32_t, uint32_t>(H5::PredType::NATIVE_UINT32), "ImageUint32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<int32_t, int32_t>(H5::PredType::NATIVE_INT32), "ImageInt32", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<float, float>(H5::PredType::NATIVE_FLOAT), "ImageFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<double, double>(H5::PredType::NATIVE_DOUBLE), "ImageDouble", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<std::complex<float>, std::complex<float>>(yardl::hdf5::ComplexTypeDdl<float>()), "ImageComplexFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageHdf5Ddl<std::complex<double>, std::complex<double>>(yardl::hdf5::ComplexTypeDdl<double>()), "ImageComplexDouble", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetAcquisitionBucketHdf5Ddl(), "AcquisitionBucket", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetReconDataHdf5Ddl(), "ReconData", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(yardl::hdf5::DynamicNDArrayDdl<std::complex<float>, std::complex<float>>(yardl::hdf5::ComplexTypeDdl<float>()), "ArrayComplexFloat", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))), std::make_tuple(mrd::hdf5::GetImageArrayHdf5Ddl(), "ImageArray", static_cast<size_t>(std::max(sizeof(::InnerUnion14<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition, mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32, mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16, mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16, mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32, mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32, mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat, mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble, mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat, mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble, mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket, mrd::hdf5::_Inner_ReconData, mrd::ReconData, yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat, mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>), sizeof(std::variant<mrd::Acquisition, mrd::WaveformUint32, mrd::ImageUint16, mrd::ImageInt16, mrd::ImageUint32, mrd::ImageInt32, mrd::ImageFloat, mrd::ImageDouble, mrd::ImageComplexFloat, mrd::ImageComplexDouble, mrd::AcquisitionBucket, mrd::ReconData, mrd::ArrayComplexFloat, mrd::ImageArray>)))));
  }

  auto [has_result, type_index, reader] = data_dataset_state_->ReadIndex();
  if (!has_result) {
    data_dataset_state_.reset();
    return false;
  }

  switch (type_index) {
  case 0: {
    mrd::Acquisition& ref = value.emplace<0>();
    reader->Read<mrd::hdf5::_Inner_Acquisition, mrd::Acquisition>(ref);
    break;
  }
  case 1: {
    mrd::WaveformUint32& ref = value.emplace<1>();
    reader->Read<mrd::hdf5::_Inner_Waveform<uint32_t, uint32_t>, mrd::WaveformUint32>(ref);
    break;
  }
  case 2: {
    mrd::ImageUint16& ref = value.emplace<2>();
    reader->Read<mrd::hdf5::_Inner_Image<uint16_t, uint16_t>, mrd::ImageUint16>(ref);
    break;
  }
  case 3: {
    mrd::ImageInt16& ref = value.emplace<3>();
    reader->Read<mrd::hdf5::_Inner_Image<int16_t, int16_t>, mrd::ImageInt16>(ref);
    break;
  }
  case 4: {
    mrd::ImageUint32& ref = value.emplace<4>();
    reader->Read<mrd::hdf5::_Inner_Image<uint32_t, uint32_t>, mrd::ImageUint32>(ref);
    break;
  }
  case 5: {
    mrd::ImageInt32& ref = value.emplace<5>();
    reader->Read<mrd::hdf5::_Inner_Image<int32_t, int32_t>, mrd::ImageInt32>(ref);
    break;
  }
  case 6: {
    mrd::ImageFloat& ref = value.emplace<6>();
    reader->Read<mrd::hdf5::_Inner_Image<float, float>, mrd::ImageFloat>(ref);
    break;
  }
  case 7: {
    mrd::ImageDouble& ref = value.emplace<7>();
    reader->Read<mrd::hdf5::_Inner_Image<double, double>, mrd::ImageDouble>(ref);
    break;
  }
  case 8: {
    mrd::ImageComplexFloat& ref = value.emplace<8>();
    reader->Read<mrd::hdf5::_Inner_Image<std::complex<float>, std::complex<float>>, mrd::ImageComplexFloat>(ref);
    break;
  }
  case 9: {
    mrd::ImageComplexDouble& ref = value.emplace<9>();
    reader->Read<mrd::hdf5::_Inner_Image<std::complex<double>, std::complex<double>>, mrd::ImageComplexDouble>(ref);
    break;
  }
  case 10: {
    mrd::AcquisitionBucket& ref = value.emplace<10>();
    reader->Read<mrd::hdf5::_Inner_AcquisitionBucket, mrd::AcquisitionBucket>(ref);
    break;
  }
  case 11: {
    mrd::ReconData& ref = value.emplace<11>();
    reader->Read<mrd::hdf5::_Inner_ReconData, mrd::ReconData>(ref);
    break;
  }
  case 12: {
    mrd::ArrayComplexFloat& ref = value.emplace<12>();
    reader->Read<yardl::hdf5::InnerDynamicNdArray<std::complex<float>, std::complex<float>>, mrd::ArrayComplexFloat>(ref);
    break;
  }
  case 13: {
    mrd::ImageArray& ref = value.emplace<13>();
    reader->Read<mrd::hdf5::_Inner_ImageArray, mrd::ImageArray>(ref);
    break;
  }
  }

  return true;
}

MrdNoiseCovarianceWriter::MrdNoiseCovarianceWriter(std::string path)
    : yardl::hdf5::Hdf5Writer::Hdf5Writer(path, "MrdNoiseCovariance", schema_) {
}

void MrdNoiseCovarianceWriter::WriteNoiseCovarianceImpl(mrd::NoiseCovariance const& value) {
  yardl::hdf5::WriteScalarDataset<mrd::hdf5::_Inner_NoiseCovariance, mrd::NoiseCovariance>(group_, "noiseCovariance", mrd::hdf5::GetNoiseCovarianceHdf5Ddl(), value);
}

MrdNoiseCovarianceReader::MrdNoiseCovarianceReader(std::string path)
    : yardl::hdf5::Hdf5Reader::Hdf5Reader(path, "MrdNoiseCovariance", schema_) {
}

void MrdNoiseCovarianceReader::ReadNoiseCovarianceImpl(mrd::NoiseCovariance& value) {
  yardl::hdf5::ReadScalarDataset<mrd::hdf5::_Inner_NoiseCovariance, mrd::NoiseCovariance>(group_, "noiseCovariance", mrd::hdf5::GetNoiseCovarianceHdf5Ddl(), value);
}

} // namespace mrd::hdf5

