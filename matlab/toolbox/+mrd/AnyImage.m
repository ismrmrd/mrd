% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef AnyImage < yardl.Union
  methods (Static)
    function res = ImageUint16(value)
      res = mrd.AnyImage(1, value);
    end

    function res = ImageInt16(value)
      res = mrd.AnyImage(2, value);
    end

    function res = ImageUint32(value)
      res = mrd.AnyImage(3, value);
    end

    function res = ImageInt32(value)
      res = mrd.AnyImage(4, value);
    end

    function res = ImageFloat(value)
      res = mrd.AnyImage(5, value);
    end

    function res = ImageDouble(value)
      res = mrd.AnyImage(6, value);
    end

    function res = ImageComplexFloat(value)
      res = mrd.AnyImage(7, value);
    end

    function res = ImageComplexDouble(value)
      res = mrd.AnyImage(8, value);
    end

    function z = zeros(varargin)
      elem = mrd.AnyImage(0, yardl.None);
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end

  methods
    function res = isImageUint16(self)
      res = self.index == 1;
    end

    function res = isImageInt16(self)
      res = self.index == 2;
    end

    function res = isImageUint32(self)
      res = self.index == 3;
    end

    function res = isImageInt32(self)
      res = self.index == 4;
    end

    function res = isImageFloat(self)
      res = self.index == 5;
    end

    function res = isImageDouble(self)
      res = self.index == 6;
    end

    function res = isImageComplexFloat(self)
      res = self.index == 7;
    end

    function res = isImageComplexDouble(self)
      res = self.index == 8;
    end

    function eq = eq(self, other)
      eq = isa(other, "mrd.AnyImage") && all([self.index_] == [other.index_], 'all') && all([self.value] == [other.value], 'all');
    end

    function ne = ne(self, other)
      ne = ~self.eq(other);
    end

    function t = tag(self)
      tags_ = ["ImageUint16", "ImageInt16", "ImageUint32", "ImageInt32", "ImageFloat", "ImageDouble", "ImageComplexFloat", "ImageComplexDouble"];
      t = tags_(self.index_);
    end
  end
end
