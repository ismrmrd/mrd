% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef StreamItem < yardl.Union
  methods (Static)
    function res = Acquisition(value)
      res = mrd.StreamItem(1, value);
    end

    function res = WaveformUint32(value)
      res = mrd.StreamItem(2, value);
    end

    function res = ImageUint16(value)
      res = mrd.StreamItem(3, value);
    end

    function res = ImageInt16(value)
      res = mrd.StreamItem(4, value);
    end

    function res = ImageUint(value)
      res = mrd.StreamItem(5, value);
    end

    function res = ImageInt(value)
      res = mrd.StreamItem(6, value);
    end

    function res = ImageFloat(value)
      res = mrd.StreamItem(7, value);
    end

    function res = ImageDouble(value)
      res = mrd.StreamItem(8, value);
    end

    function res = ImageComplexFloat(value)
      res = mrd.StreamItem(9, value);
    end

    function res = ImageComplexDouble(value)
      res = mrd.StreamItem(10, value);
    end

    function z = zeros(varargin)
      elem = mrd.StreamItem(0, yardl.None);
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end

  methods
    function res = isAcquisition(self)
      res = self.index == 1;
    end

    function res = isWaveformUint32(self)
      res = self.index == 2;
    end

    function res = isImageUint16(self)
      res = self.index == 3;
    end

    function res = isImageInt16(self)
      res = self.index == 4;
    end

    function res = isImageUint(self)
      res = self.index == 5;
    end

    function res = isImageInt(self)
      res = self.index == 6;
    end

    function res = isImageFloat(self)
      res = self.index == 7;
    end

    function res = isImageDouble(self)
      res = self.index == 8;
    end

    function res = isImageComplexFloat(self)
      res = self.index == 9;
    end

    function res = isImageComplexDouble(self)
      res = self.index == 10;
    end

    function eq = eq(self, other)
      eq = isa(other, "mrd.StreamItem") && isequal(self.index, other.index) && isequal(self.value, other.value);
    end

    function ne = ne(self, other)
      ne = ~self.eq(other);
    end

    function t = tag(self)
      tags_ = ["Acquisition", "WaveformUint32", "ImageUint16", "ImageInt16", "ImageUint", "ImageInt", "ImageFloat", "ImageDouble", "ImageComplexFloat", "ImageComplexDouble"];
      t = tags_(self.index_);
    end
  end
end
