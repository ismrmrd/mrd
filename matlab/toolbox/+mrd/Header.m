% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef Header < handle
  properties
    version
    subject_information
    study_information
    measurement_information
    acquisition_system_information
    experimental_conditions
    encoding
    sequence_parameters
    user_parameters
    waveform_information
  end

  methods
    function self = Header(kwargs)
      arguments
        kwargs.version = yardl.None;
        kwargs.subject_information = yardl.None;
        kwargs.study_information = yardl.None;
        kwargs.measurement_information = yardl.None;
        kwargs.acquisition_system_information = yardl.None;
        kwargs.experimental_conditions = mrd.ExperimentalConditionsType();
        kwargs.encoding = mrd.EncodingType.empty();
        kwargs.sequence_parameters = yardl.None;
        kwargs.user_parameters = yardl.None;
        kwargs.waveform_information = mrd.WaveformInformationType.empty();
      end
      self.version = kwargs.version;
      self.subject_information = kwargs.subject_information;
      self.study_information = kwargs.study_information;
      self.measurement_information = kwargs.measurement_information;
      self.acquisition_system_information = kwargs.acquisition_system_information;
      self.experimental_conditions = kwargs.experimental_conditions;
      self.encoding = kwargs.encoding;
      self.sequence_parameters = kwargs.sequence_parameters;
      self.user_parameters = kwargs.user_parameters;
      self.waveform_information = kwargs.waveform_information;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.Header") && ...
        isequal({self.version}, {other.version}) && ...
        isequal({self.subject_information}, {other.subject_information}) && ...
        isequal({self.study_information}, {other.study_information}) && ...
        isequal({self.measurement_information}, {other.measurement_information}) && ...
        isequal({self.acquisition_system_information}, {other.acquisition_system_information}) && ...
        isequal({self.experimental_conditions}, {other.experimental_conditions}) && ...
        isequal({self.encoding}, {other.encoding}) && ...
        isequal({self.sequence_parameters}, {other.sequence_parameters}) && ...
        isequal({self.user_parameters}, {other.user_parameters}) && ...
        isequal({self.waveform_information}, {other.waveform_information});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.Header();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
