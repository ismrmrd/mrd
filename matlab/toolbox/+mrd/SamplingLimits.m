% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef SamplingLimits < handle
  % Sampled range along RO, E1, E2 (for asymmetric echo and partial fourier)
  properties
    ro
    e1
    e2
  end

  methods
    function self = SamplingLimits(kwargs)
      arguments
        kwargs.ro = mrd.LimitType();
        kwargs.e1 = mrd.LimitType();
        kwargs.e2 = mrd.LimitType();
      end
      self.ro = kwargs.ro;
      self.e1 = kwargs.e1;
      self.e2 = kwargs.e2;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.SamplingLimits") && ...
        isequal(self.ro, other.ro) && ...
        isequal(self.e1, other.e1) && ...
        isequal(self.e2, other.e2);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.SamplingLimits();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
