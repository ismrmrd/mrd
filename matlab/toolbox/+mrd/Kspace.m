% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef Kspace < handle
  properties
    reference
    data
    mask
  end

  methods
    function self = Kspace(kwargs)
      arguments
        kwargs.reference = mrd.Acquisition();
        kwargs.data = single.empty(0, 0, 0, 0, 0, 0);
        kwargs.mask = yardl.None;
      end
      self.reference = kwargs.reference;
      self.data = kwargs.data;
      self.mask = kwargs.mask;
    end

    function res = slices(self)
      res = size(self.data, ndims(self.data)-(1));
      return
    end

    function res = contrasts(self)
      res = size(self.data, ndims(self.data)-(0));
      return
    end

    function res = coils(self)
      res = size(self.data, ndims(self.data)-(2));
      return
    end

    function res = nz(self)
      res = size(self.data, ndims(self.data)-(3));
      return
    end

    function res = ny(self)
      res = size(self.data, ndims(self.data)-(4));
      return
    end

    function res = nx(self)
      res = size(self.data, ndims(self.data)-(5));
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.Kspace") && ...
        isequal(self.reference, other.reference) && ...
        isequal(self.data, other.data) && ...
        isequal(self.mask, other.mask);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.Kspace();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
