% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef GradientDirectionType < handle
  properties
    rl
    ap
    fh
  end

  methods
    function self = GradientDirectionType(kwargs)
      arguments
        kwargs.rl = single(0);
        kwargs.ap = single(0);
        kwargs.fh = single(0);
      end
      self.rl = kwargs.rl;
      self.ap = kwargs.ap;
      self.fh = kwargs.fh;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.GradientDirectionType") && ...
        isequal(self.rl, other.rl) && ...
        isequal(self.ap, other.ap) && ...
        isequal(self.fh, other.fh);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.GradientDirectionType();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
