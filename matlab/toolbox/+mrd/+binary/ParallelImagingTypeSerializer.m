% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef ParallelImagingTypeSerializer < yardl.binary.RecordSerializer
  methods
    function self = ParallelImagingTypeSerializer()
      field_serializers{1} = mrd.binary.AccelerationFactorTypeSerializer();
      field_serializers{2} = yardl.binary.OptionalSerializer(yardl.binary.EnumSerializer('mrd.CalibrationMode', @mrd.CalibrationMode, yardl.binary.Int32Serializer));
      field_serializers{3} = yardl.binary.OptionalSerializer(yardl.binary.EnumSerializer('mrd.InterleavingDimension', @mrd.InterleavingDimension, yardl.binary.Int32Serializer));
      field_serializers{4} = yardl.binary.OptionalSerializer(mrd.binary.MultibandTypeSerializer());
      self@yardl.binary.RecordSerializer('mrd.ParallelImagingType', field_serializers);
    end

    function write(self, outstream, value)
      arguments
        self
        outstream (1,1) yardl.binary.CodedOutputStream
        value (1,1) mrd.ParallelImagingType
      end
      self.write_(outstream, value.acceleration_factor, value.calibration_mode, value.interleaving_dimension, value.multiband);
    end

    function value = read(self, instream)
      fields = self.read_(instream);
      value = mrd.ParallelImagingType(acceleration_factor=fields{1}, calibration_mode=fields{2}, interleaving_dimension=fields{3}, multiband=fields{4});
    end
  end
end
