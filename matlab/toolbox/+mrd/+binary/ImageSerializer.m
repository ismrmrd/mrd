% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef ImageSerializer < yardl.binary.RecordSerializer
  methods
    function self = ImageSerializer(t_serializer)
      field_serializers{1} = yardl.binary.EnumSerializer('mrd.ImageFlags', @mrd.ImageFlags, yardl.binary.Uint64Serializer);
      field_serializers{2} = yardl.binary.Uint32Serializer;
      field_serializers{3} = yardl.binary.FixedNDArraySerializer(yardl.binary.Float32Serializer, [3]);
      field_serializers{4} = yardl.binary.FixedNDArraySerializer(yardl.binary.Float32Serializer, [3]);
      field_serializers{5} = yardl.binary.FixedNDArraySerializer(yardl.binary.Float32Serializer, [3]);
      field_serializers{6} = yardl.binary.FixedNDArraySerializer(yardl.binary.Float32Serializer, [3]);
      field_serializers{7} = yardl.binary.FixedNDArraySerializer(yardl.binary.Float32Serializer, [3]);
      field_serializers{8} = yardl.binary.FixedNDArraySerializer(yardl.binary.Float32Serializer, [3]);
      field_serializers{9} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{10} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{11} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{12} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{13} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{14} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{15} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{16} = yardl.binary.VectorSerializer(yardl.binary.Uint32Serializer);
      field_serializers{17} = yardl.binary.EnumSerializer('mrd.ImageType', @mrd.ImageType, yardl.binary.Int32Serializer);
      field_serializers{18} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{19} = yardl.binary.OptionalSerializer(yardl.binary.Uint32Serializer);
      field_serializers{20} = yardl.binary.VectorSerializer(yardl.binary.Int32Serializer);
      field_serializers{21} = yardl.binary.VectorSerializer(yardl.binary.Float32Serializer);
      field_serializers{22} = yardl.binary.NDArraySerializer(t_serializer, 4);
      field_serializers{23} = yardl.binary.MapSerializer(yardl.binary.StringSerializer, yardl.binary.VectorSerializer(yardl.binary.StringSerializer));
      self@yardl.binary.RecordSerializer('mrd.Image', field_serializers);
    end

    function write(self, outstream, value)
      arguments
        self
        outstream (1,1) yardl.binary.CodedOutputStream
        value (1,1) mrd.Image
      end
      self.write_(outstream, value.flags, value.measurement_uid, value.field_of_view, value.position, value.col_dir, value.line_dir, value.slice_dir, value.patient_table_position, value.average, value.slice, value.contrast, value.phase, value.repetition, value.set, value.acquisition_time_stamp, value.physiology_time_stamp, value.image_type, value.image_index, value.image_series_index, value.user_int, value.user_float, value.data, value.meta);
    end

    function value = read(self, instream)
      fields = self.read_(instream);
      value = mrd.Image(flags=fields{1}, measurement_uid=fields{2}, field_of_view=fields{3}, position=fields{4}, col_dir=fields{5}, line_dir=fields{6}, slice_dir=fields{7}, patient_table_position=fields{8}, average=fields{9}, slice=fields{10}, contrast=fields{11}, phase=fields{12}, repetition=fields{13}, set=fields{14}, acquisition_time_stamp=fields{15}, physiology_time_stamp=fields{16}, image_type=fields{17}, image_index=fields{18}, image_series_index=fields{19}, user_int=fields{20}, user_float=fields{21}, data=fields{22}, meta=fields{23});
    end
  end
end
