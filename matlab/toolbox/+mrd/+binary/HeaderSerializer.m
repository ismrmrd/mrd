% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef HeaderSerializer < yardl.binary.RecordSerializer
  methods
    function self = HeaderSerializer()
      field_serializers{1} = yardl.binary.OptionalSerializer(yardl.binary.Int64Serializer);
      field_serializers{2} = yardl.binary.OptionalSerializer(mrd.binary.SubjectInformationTypeSerializer());
      field_serializers{3} = yardl.binary.OptionalSerializer(mrd.binary.StudyInformationTypeSerializer());
      field_serializers{4} = yardl.binary.OptionalSerializer(mrd.binary.MeasurementInformationTypeSerializer());
      field_serializers{5} = yardl.binary.OptionalSerializer(mrd.binary.AcquisitionSystemInformationTypeSerializer());
      field_serializers{6} = mrd.binary.ExperimentalConditionsTypeSerializer();
      field_serializers{7} = yardl.binary.VectorSerializer(mrd.binary.EncodingTypeSerializer());
      field_serializers{8} = yardl.binary.OptionalSerializer(mrd.binary.SequenceParametersTypeSerializer());
      field_serializers{9} = yardl.binary.OptionalSerializer(mrd.binary.UserParametersTypeSerializer());
      field_serializers{10} = yardl.binary.VectorSerializer(mrd.binary.WaveformInformationTypeSerializer());
      self@yardl.binary.RecordSerializer('mrd.Header', field_serializers);
    end

    function write(self, outstream, value)
      arguments
        self
        outstream (1,1) yardl.binary.CodedOutputStream
        value (1,1) mrd.Header
      end
      self.write_(outstream, value.version, value.subject_information, value.study_information, value.measurement_information, value.acquisition_system_information, value.experimental_conditions, value.encoding, value.sequence_parameters, value.user_parameters, value.waveform_information);
    end

    function value = read(self, instream)
      fields = self.read_(instream);
      value = mrd.Header(version=fields{1}, subject_information=fields{2}, study_information=fields{3}, measurement_information=fields{4}, acquisition_system_information=fields{5}, experimental_conditions=fields{6}, encoding=fields{7}, sequence_parameters=fields{8}, user_parameters=fields{9}, waveform_information=fields{10});
    end
  end
end
