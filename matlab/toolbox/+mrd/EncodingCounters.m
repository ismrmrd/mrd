% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef EncodingCounters < handle
  properties
    kspace_encode_step_1
    kspace_encode_step_2
    average
    slice
    contrast
    phase
    repetition
    set
    segment
    user
  end

  methods
    function self = EncodingCounters(kwargs)
      arguments
        kwargs.kspace_encode_step_1 = yardl.None;
        kwargs.kspace_encode_step_2 = yardl.None;
        kwargs.average = yardl.None;
        kwargs.slice = yardl.None;
        kwargs.contrast = yardl.None;
        kwargs.phase = yardl.None;
        kwargs.repetition = yardl.None;
        kwargs.set = yardl.None;
        kwargs.segment = yardl.None;
        kwargs.user = uint32.empty();
      end
      self.kspace_encode_step_1 = kwargs.kspace_encode_step_1;
      self.kspace_encode_step_2 = kwargs.kspace_encode_step_2;
      self.average = kwargs.average;
      self.slice = kwargs.slice;
      self.contrast = kwargs.contrast;
      self.phase = kwargs.phase;
      self.repetition = kwargs.repetition;
      self.set = kwargs.set;
      self.segment = kwargs.segment;
      self.user = kwargs.user;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.EncodingCounters") && ...
        all([self.kspace_encode_step_1] == [other.kspace_encode_step_1]) && ...
        all([self.kspace_encode_step_2] == [other.kspace_encode_step_2]) && ...
        all([self.average] == [other.average]) && ...
        all([self.slice] == [other.slice]) && ...
        all([self.contrast] == [other.contrast]) && ...
        all([self.phase] == [other.phase]) && ...
        all([self.repetition] == [other.repetition]) && ...
        all([self.set] == [other.set]) && ...
        all([self.segment] == [other.segment]) && ...
        all([self.user] == [other.user]);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.EncodingCounters();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
