% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef StudyInformationType < handle
  properties
    study_date
    study_time
    study_id
    accession_number
    referring_physician_name
    study_description
    study_instance_uid
    body_part_examined
  end

  methods
    function self = StudyInformationType(kwargs)
      arguments
        kwargs.study_date = yardl.None;
        kwargs.study_time = yardl.None;
        kwargs.study_id = yardl.None;
        kwargs.accession_number = yardl.None;
        kwargs.referring_physician_name = yardl.None;
        kwargs.study_description = yardl.None;
        kwargs.study_instance_uid = yardl.None;
        kwargs.body_part_examined = yardl.None;
      end
      self.study_date = kwargs.study_date;
      self.study_time = kwargs.study_time;
      self.study_id = kwargs.study_id;
      self.accession_number = kwargs.accession_number;
      self.referring_physician_name = kwargs.referring_physician_name;
      self.study_description = kwargs.study_description;
      self.study_instance_uid = kwargs.study_instance_uid;
      self.body_part_examined = kwargs.body_part_examined;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.StudyInformationType") && ...
        isequal(self.study_date, other.study_date) && ...
        isequal(self.study_time, other.study_time) && ...
        isequal(self.study_id, other.study_id) && ...
        isequal(self.accession_number, other.accession_number) && ...
        isequal(self.referring_physician_name, other.referring_physician_name) && ...
        isequal(self.study_description, other.study_description) && ...
        isequal(self.study_instance_uid, other.study_instance_uid) && ...
        isequal(self.body_part_examined, other.body_part_examined);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.StudyInformationType();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
