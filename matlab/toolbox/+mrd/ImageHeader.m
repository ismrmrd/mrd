% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef ImageHeader < handle
  properties
    % A bit mask of common attributes applicable to individual images
    flags
    % Unique ID corresponding to the image
    measurement_uid
    % Physical size (in mm) in each of the 3 dimensions in the image
    field_of_view
    % Center of the excited volume, in LPS coordinates relative to isocenter in millimeters
    position
    % Directional cosine of readout/frequency encoding
    col_dir
    % Directional cosine of phase encoding (2D)
    line_dir
    % Directional cosine of 3D phase encoding direction
    slice_dir
    % Offset position of the patient table, in LPS coordinates
    patient_table_position
    % Signal average
    average
    % Slice number (multi-slice 2D)
    slice
    % Echo number in multi-echo
    contrast
    % Cardiac phase
    phase
    % Counter in repeated/dynamic acquisitions
    repetition
    % Sets of different preparation, e.g. flow encoding, diffusion weighting
    set
    % Clock time stamp (e.g. milliseconds since midnight)
    acquisition_time_stamp
    % Time stamps relative to physiological triggering, e.g. ECG, pulse oximetry, respiratory
    physiology_time_stamp
    % Interpretation type of the image
    image_type
    % Image index number within a series of images, corresponding to DICOM InstanceNumber (0020,0013)
    image_index
    % Series index, used to separate images into different series, corresponding to DICOM SeriesNumber (0020,0011)
    image_series_index
    % User-defined int parameters
    user_int
    % User-defined float parameters
    user_float
  end

  methods
    function self = ImageHeader(kwargs)
      arguments
        kwargs.flags = mrd.ImageFlags(0);
        kwargs.measurement_uid = uint32(0);
        kwargs.field_of_view = repelem(single(0), 3, 1);
        kwargs.position = repelem(single(0), 3, 1);
        kwargs.col_dir = repelem(single(0), 3, 1);
        kwargs.line_dir = repelem(single(0), 3, 1);
        kwargs.slice_dir = repelem(single(0), 3, 1);
        kwargs.patient_table_position = repelem(single(0), 3, 1);
        kwargs.average = yardl.None;
        kwargs.slice = yardl.None;
        kwargs.contrast = yardl.None;
        kwargs.phase = yardl.None;
        kwargs.repetition = yardl.None;
        kwargs.set = yardl.None;
        kwargs.acquisition_time_stamp = yardl.None;
        kwargs.physiology_time_stamp = uint32.empty();
        kwargs.image_type;
        kwargs.image_index = yardl.None;
        kwargs.image_series_index = yardl.None;
        kwargs.user_int = int32.empty();
        kwargs.user_float = single.empty();
      end
      self.flags = kwargs.flags;
      self.measurement_uid = kwargs.measurement_uid;
      self.field_of_view = kwargs.field_of_view;
      self.position = kwargs.position;
      self.col_dir = kwargs.col_dir;
      self.line_dir = kwargs.line_dir;
      self.slice_dir = kwargs.slice_dir;
      self.patient_table_position = kwargs.patient_table_position;
      self.average = kwargs.average;
      self.slice = kwargs.slice;
      self.contrast = kwargs.contrast;
      self.phase = kwargs.phase;
      self.repetition = kwargs.repetition;
      self.set = kwargs.set;
      self.acquisition_time_stamp = kwargs.acquisition_time_stamp;
      self.physiology_time_stamp = kwargs.physiology_time_stamp;
      if ~isfield(kwargs, "image_type")
        throw(yardl.TypeError("Missing required keyword argument 'image_type'"))
      end
      self.image_type = kwargs.image_type;
      self.image_index = kwargs.image_index;
      self.image_series_index = kwargs.image_series_index;
      self.user_int = kwargs.user_int;
      self.user_float = kwargs.user_float;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.ImageHeader") && ...
        isequal(self.flags, other.flags) && ...
        isequal(self.measurement_uid, other.measurement_uid) && ...
        isequal(self.field_of_view, other.field_of_view) && ...
        isequal(self.position, other.position) && ...
        isequal(self.col_dir, other.col_dir) && ...
        isequal(self.line_dir, other.line_dir) && ...
        isequal(self.slice_dir, other.slice_dir) && ...
        isequal(self.patient_table_position, other.patient_table_position) && ...
        isequal(self.average, other.average) && ...
        isequal(self.slice, other.slice) && ...
        isequal(self.contrast, other.contrast) && ...
        isequal(self.phase, other.phase) && ...
        isequal(self.repetition, other.repetition) && ...
        isequal(self.set, other.set) && ...
        isequal(self.acquisition_time_stamp, other.acquisition_time_stamp) && ...
        isequal(self.physiology_time_stamp, other.physiology_time_stamp) && ...
        isequal(self.image_type, other.image_type) && ...
        isequal(self.image_index, other.image_index) && ...
        isequal(self.image_series_index, other.image_series_index) && ...
        isequal(self.user_int, other.user_int) && ...
        isequal(self.user_float, other.user_float);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

end
