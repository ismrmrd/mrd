% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef TrajectoryDescriptionType < handle
  properties
    identifier
    user_parameter_long
    user_parameter_double
    user_parameter_string
    comment
  end

  methods
    function self = TrajectoryDescriptionType(kwargs)
      arguments
        kwargs.identifier = "";
        kwargs.user_parameter_long = mrd.UserParameterLongType.empty();
        kwargs.user_parameter_double = mrd.UserParameterDoubleType.empty();
        kwargs.user_parameter_string = mrd.UserParameterStringType.empty();
        kwargs.comment = yardl.None;
      end
      self.identifier = kwargs.identifier;
      self.user_parameter_long = kwargs.user_parameter_long;
      self.user_parameter_double = kwargs.user_parameter_double;
      self.user_parameter_string = kwargs.user_parameter_string;
      self.comment = kwargs.comment;
    end

    function res = eq(self, other)
      res = ...
        isa(other, "mrd.TrajectoryDescriptionType") && ...
        isequal({self.identifier}, {other.identifier}) && ...
        isequal({self.user_parameter_long}, {other.user_parameter_long}) && ...
        isequal({self.user_parameter_double}, {other.user_parameter_double}) && ...
        isequal({self.user_parameter_string}, {other.user_parameter_string}) && ...
        isequal({self.comment}, {other.comment});
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end

    function res = isequal(self, other)
      res = all(eq(self, other));
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.TrajectoryDescriptionType();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
