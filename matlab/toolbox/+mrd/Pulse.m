% This file was generated by the "yardl" tool. DO NOT EDIT.

classdef Pulse < handle
  properties
    % Pulse header
    head
    % Raw pulse amplitude array
    amplitude
    % Full profile of pulse phase array
    phase
    % Pulse phase offset
    phase_offset
  end

  methods
    function self = Pulse(kwargs)
      arguments
        kwargs.head = mrd.PulseHeader();
        kwargs.amplitude = single.empty(0, 0);
        kwargs.phase = single.empty(0);
        kwargs.phase_offset = single.empty(0);
      end
      self.head = kwargs.head;
      self.amplitude = kwargs.amplitude;
      self.phase = kwargs.phase;
      self.phase_offset = kwargs.phase_offset;
    end

    function res = coils(self)
      % Assuming writer sets amp and phase array the same size
      res = size(self.amplitude, ndims(self.amplitude)-(0));
      return
    end

    function res = samples(self)
      res = size(self.amplitude, ndims(self.amplitude)-(1));
      return
    end

    function res = active_channels(self)
      res = length(self.head.channel_order);
      return
    end


    function res = eq(self, other)
      res = ...
        isa(other, "mrd.Pulse") && ...
        isequal(self.head, other.head) && ...
        isequal(self.amplitude, other.amplitude) && ...
        isequal(self.phase, other.phase) && ...
        isequal(self.phase_offset, other.phase_offset);
    end

    function res = ne(self, other)
      res = ~self.eq(other);
    end
  end

  methods (Static)
    function z = zeros(varargin)
      elem = mrd.Pulse();
      if nargin == 0
        z = elem;
        return;
      end
      sz = [varargin{:}];
      if isscalar(sz)
        sz = [sz, sz];
      end
      z = reshape(repelem(elem, prod(sz)), sz);
    end
  end
end
